{
    "cds.typeGenerator.enabled.desc.markdown": "Generate type definitions.\nRequires `@cap-js/cds-typer` to be installed\n\n**NOTE:** This feature is still experimental (beta)",
    "cds.typeGenerator.outputPath.desc.markdown": "Directory that serves as root for the generated type definitions. Relative to the project's root",
    "cds.typeGenerator.command.desc.markdown": "The command that is executed when generating model types. You can use the following variables in your command template:\n\n- `${typerBinary}`: the binary\n- `${targetFile}`: the file that is being typed\n- `${outputDirectory}`: the directory into which the type information is generated",
    "cds.showWelcomePage.command.title": "Show CAP Release Notes",
    "cds.restartLsp.command.title": "Restart Language Support",
    "cds.lsp.traces.startRecording.command.title": "Record Traces for Support Ticket",
    "cds.lsp.traces.startRecording.detailed.command.title": "Record (Verbose) Traces for Support Ticket",
    "cds.analyzeDependencies.command.title": "Visualize CDS file dependencies",
    "cds.checkDevKitInstalled.desc.markdown": "Check if _CDS Development Kit_ is globally installed and ask for installation.\n\nThe development kit is required to create new CDS projects\n\n**NOTE:** This will only work if `npm i -g ...` will work without an admin password, which is the case e.g. when using a Node.js package manager like `nvm`, when redirecting npm storage via `npm config set prefix`, or on Windows with admin rights.\n\nNothing will be done if `@sap/cds-dk` is already globally available, but wasn't installed via npm",
    "cds.compiler.detectLocalSapCdsInstallation.desc.markdown": "Re-validate source files when `@sap/cds` changes in `<workspace>/node_modules`.\n\n**NOTE:** This installs a file system watcher on `node_modules` which may lead to increased CPU load depending on used operating system",
    "cds.compiler.markMissingI18nDefault.desc.markdown": "Show warning problem markers for unresolved `i18n` references.\n\n**NOTE:** For huge models it may show performance degradations",
    "cds.compiler.showInternalErrors.desc": "Print internal compiler errors to the console",
    "cds.completion.annotations.omitRedundantTypesInSnippets.desc": "Omit redundant record types in suggested snippets",
    "cds.completion.showDocumentation.desc": "Show documentation in code completion",
    "cds.completion.docFiles.desc": "Potential names of files to show as documentation. This is an ordered list. The first filename that exists is used.",
    "cds.completion.formatSnippets.desc": "Format snippets after applying in code completion",
    "cds.completion.workspaceSymbols.maxProposals.desc": "Maximum number of workspace symbols to suggest. Default is -1 (all)",
    "cds.completion.workspaceSymbols.minPrefixLength.desc": "Number of characters required to suggest (global) workspace symbols. Default is -1 (switched off - the feature may delay completion)",
    "cds.contributions.enablement.longRunning.detect.desc.markdown": "Detect long running contributions with option to disable temporarily.\n\n(For permanent disablement use setting `cds.contributions.enablement.odata`.)\n\nIf enabled, the user will be warned if a contribution repeatedly takes longer than tolerated within a given timeframe.\n\nSee additional settings for fine tuning",
    "cds.contributions.enablement.longRunning.maxMillis.desc": "Maximum milli seconds tolerated",
    "cds.contributions.enablement.longRunning.repeats.desc": "How many violations per timeframe are tolerated",
    "cds.contributions.enablement.longRunning.timeFrameSeconds.desc": "Timeframe [in seconds] in which repeated violations are reported",
    "cds.contributions.enablement.odata.desc": "Provide extended annotation support for OData",
    "cds.contributions.registry.desc": "NPM registry to be used for installation/update of contributions (e.g. OData annotation support)",
    "cds.diagnosticsSeverity.desc.markdown": "Minimum severity of compiler messages to show in _Problems_ view",
    "cds.outline.semantical.desc": "Show a semantical outline structure as opposed to the (default) flat list",
    "cds.quickfix.importArtifact.desc.markdown": "Provide a _quick fix_ for artifacts not yet imported (default disabled - the feature is CPU intensive)",
    "cds.semanticHighlighting.enabled.desc": "Semantic highlighting of certain identifiers",
    "cds.showConfiguration.command.title": "Show Formatting Options Configuration",
    "cds.trace.logfiles.count.desc" : "Number of (rotated) logfiles to be used",
    "cds.trace.logfiles.maxSize.desc" : "Maximum approx. size [in bytes] of each logfile",
    "cds.trace.server.desc.markdown": "Use `messages` to turn server tracing on. Refine trace level of server in `cds.trace.components`",
    "cds.whereused.showGenericAnnotations.desc.markdown": "Find usages of same annotation names via _References_ command and explicit annotation definitions via _Definition_ command",
    "cds.whereused.showStringConstants.desc.markdown": "Find same string constants via _References_ command",
    "cds.workspace.debounceFastChanges.desc": "Consolidate workspace changes (e.g. by typing) to reduce the number of compilations, thus increasing performance. This is especially true for large models. Disable if you should see inconsistencies e.g. error markers not matching the corresponding identifier token",
    "cds.workspace.scanCsn.desc.markdown": "How CSN files are detected:\n- `ByFileExtension` (default): CSN files (.csn or .csn.json) will be included in validation and workspace symbols\n- `InspectJson`: additionally looks into .json files if they are valid CSN. This will take considerably more time at scanning\n- `Off`: will not scan for CSN files at all",
    "cds.workspace.scanDependentModules.desc": "Scan first level dependencies in node_modules. This may increase start-up time. Enable if you want code completions for global identifiers and import paths, or want to see definitions of dependencies in workspace symbols",
    "cds.workspaceSymbols.caseInsensitive.desc.markdown": "_Workspace Symbols_ will show symbols containing the given query, independent of character casings",
    "cds.workspaceSymbols.lazy.desc.markdown": "_Workspace Symbols_ will show symbols that have the queried characters in the right order, but not necessarily consecutive",
    "cds.workspaceValidationMode.desc.markdown": "Specify which CDS files are validated:\n- `ActiveEditorOnly` (default): only the active editor is validated\n- `OpenEditorsOnly` additionally keeps other open editors' validation up-to-date\n- `OpenEditorsAndDirectSources` additionally validates CDS sources in this module\n- `OpenEditorsDirectSourcesAndDirectDependencies` additionally validates CDS sources of reachable i.e. first-level dependent modules",
    "cds.workspaceValidationOptimistic.desc.markdown": "(Beta) Reuses where-used file indexes to boost indexing and code completion performance",

    "cds.preview.sideBySide.desc": "Preview editor will open next to current editor instead of replacing it",
    "cds.preview.refreshOnSave.desc": "Refresh CDS preview when CDS file is saved",
    "cds.previewGotoSource.command.title": "Go to CDS source",
    "cds.previewAsJson.command.title":"Preview as json",
    "cds.previewAsYaml.command.title": "Preview as yaml",
    "cds.previewAsHdbtable.command.title": "Preview as hdbtable",
    "cds.previewAsEdmxV2.command.title": "Preview as edmx v2",
    "cds.previewAsEdmxV4.command.title": "Preview as edmx v4",
    "cds.previewAsSql.command.title": "Preview as sql",
    "cds.previewAsOdata.command.title": "Preview as odata",
    "cds.previewSubMenu.label": "CDS Preview",

    "cds.installCdsDk.command.title": "Install CDS Development Kit (@sap/cds-dk) globally",

    "cds.showCapNotebookPage.command.title": "Open CAP Notebooks Page",
    "cds.resetCapNotebookCwd.command.title": "Reset Working Directory",

    "cds.releaseNotes.showAutomatically.desc": "Show the CAP Release Notes when a new version is available",

    "cds.capbook.resetCwdOnRunAll.desc.markdown": "Reset current working directory when running all cells via `Run All` command.",

    "cds.enableDynamicLsp.desc.markdown": "Enable LSP loading based on used cds compiler version in workspace."
}
