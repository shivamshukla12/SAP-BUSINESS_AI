{
	"name": "cloudcode",
	"displayName": "Google Cloud Code",
	"description": "Duet AI + Tools for Google Cloud",
	"version": "2.1.1",
	"publisher": "googlecloudtools",
	"engines": {
		"vscode": "^1.68.1"
	},
	"license": "SEE LICENSE IN LICENSE",
	"categories": [
		"Snippets",
		"Linters",
		"Debuggers",
		"Other"
	],
	"keywords": [
		"AI Assistant",
		"Apigee",
		"Artifact Registry",
		"Cloud Build",
		"Cloud Functions",
		"Cloud Run",
		"Cloud SDK",
		"Code Completion",
		"Code Generation",
		"Compute Engine",
		"Container Registry",
		"Containers",
		"Docker",
		"Duet AI",
		"Duet",
		"GCE",
		"GCF",
		"GCP",
		"Google Cloud",
		"Google",
		"Kubernetes",
		"LLM",
		"Secret Manager",
		"Skaffold",
		"gcloud",
		"k8s",
		"knative",
		"minikube"
	],
	"preview": false,
	"qna": false,
	"icon": "images/logo.png",
	"activationEvents": [
		"onStartupFinished"
	],
	"main": "./dist/extension.js",
	"contributes": {
		"jsonValidation": [
			{
				"fileMatch": ".cctemplate",
				"url": "./schema/template_schema.json"
			},
			{
				"fileMatch": "deployments.json",
				"url": "./schema/apigee/deployments_schema.json"
			},
			{
				"fileMatch": "debugmask.json",
				"url": "./schema/apigee/debugmask_schema.json"
			},
			{
				"fileMatch": "flowhooks.json",
				"url": "./schema/apigee/flowhooks_schema.json"
			},
			{
				"fileMatch": "targetservers.json",
				"url": "./schema/apigee/targetservers_schema.json"
			},
			{
				"fileMatch": "keystores.json",
				"url": "./schema/apigee/keystores_schema.json"
			},
			{
				"fileMatch": "products.json",
				"url": "./schema/apigee/products_schema.json"
			},
			{
				"fileMatch": "developers.json",
				"url": "./schema/apigee/developers_schema.json"
			},
			{
				"fileMatch": "developerapps.json",
				"url": "./schema/apigee/apps_schema.json"
			},
			{
				"fileMatch": "maps.json",
				"url": "./schema/apigee/maps_schema.json"
			},
			{
				"fileMatch": "mfit-sources.json",
				"url": "./schema/migrate-to-containers/sources.schema.json"
			}
		],
		"languages": [
			{
				"id": "ignore",
				"filenames": [
					".gcloudignore"
				]
			},
			{
				"id": "Log",
				"aliases": [
					"log"
				],
				"extensions": [
					".log"
				],
				"configuration": "./log.configuration.json",
				"mimetypes": [
					"log",
					"text/log",
					"text/x-log",
					"text/x-code-output",
					"x-code-output"
				]
			}
		],
		"grammars": [
			{
				"language": "Log",
				"scopeName": "code.log",
				"path": "./third_party/vscode-log-output-colorizer/src/syntaxes/log.tmLanguage"
			}
		],
		"configurationDefaults": {
			"[yaml]": {
				"editor.insertSpaces": true,
				"editor.tabSize": 2,
				"editor.quickSuggestions": {
					"other": true,
					"comments": false,
					"strings": true
				},
				"editor.autoIndent": "none"
			}
		},
		"configuration": {
			"type": "object",
			"title": "Google Cloud Code",
			"properties": {
				"cloudcode.project": {
					"type": "string",
					"description": "The Google Cloud project used by Cloud Code for viewing and interacting with project resources"
				},
				"cloudcode.debug-kubernetes": {
					"type": "object",
					"description": "Provide customizations for the Cloud Code debuggers.",
					"properties": {
						"suppressNETCoreWarning": {
							"type": "boolean",
							"description": "If true, suppress .NET Core debug warning."
						},
						"suppressJavaWarning": {
							"type": "boolean",
							"description": "If true, suppress Java debug warning."
						},
						"suppressPythonWarning": {
							"type": "boolean",
							"description": "If true, suppress Python debug warning."
						},
						"suppressNodeJSWarning": {
							"type": "boolean",
							"description": "If true, suppress Node JS debug warning."
						},
						"suppressGoWarning": {
							"type": "boolean",
							"description": "If true, suppress Go debug warning."
						}
					}
				},
				"cloudcode.kubeconfigs": {
					"type": "array",
					"default": [],
					"items": {
						"type": "object",
						"properties": {
							"name": {
								"type": "string",
								"description": "Name to reference the KubeConfig."
							},
							"configPath": {
								"type": "string",
								"description": "Full path to the KubeConfig file."
							}
						}
					},
					"markdownDescription": "List of KubeConfig files that can be used in the Kubernetes Explorer. Switch between the default KubeConfig and KubeConfigs listed here with the `#cloudcode.active-kubeconfig#` setting."
				},
				"cloudcode.apigee.emulators": {
					"type": "array",
					"items": {
						"type": "string",
						"description": "Tag for the emulator image from gcr.io/apigee-release/hybrid/apigee-emulator"
					},
					"default": [
						"1.9.2"
					],
					"description": "List of emulator tags to be enabled in the emulator view"
				},
				"cloudcode.apigee.dockerOptions": {
					"type": "object",
					"properties": {
						"environmentVariables": {
							"type": "object",
							"additionalProperties": {
								"type": "string"
							},
							"description": "Environment variables to be attached, key is the variable name to be exported and the value represents the variable's value",
							"default": {
								"XTERM": "xterm-256color"
							}
						},
						"dns": {
							"type": "string",
							"description": "DNS settings for the container",
							"default": "8.8.8.8"
						},
						"detached": {
							"type": "boolean",
							"description": "Should the container be started in detached mode",
							"default": true
						},
						"privileged": {
							"type": "boolean",
							"description": "Should the container be started in priviledged mode",
							"default": true
						},
						"labels": {
							"type": "object",
							"additionalProperties": {
								"type": "string"
							},
							"description": "Labels to be assigned, where the key represents label name and the value label's value"
						},
						"volumes": {
							"type": "object",
							"additionalProperties": {
								"type": "string"
							},
							"description": "Disk volumes to be mounted, where the key represents the host path and the value represents the path mounted in the container"
						},
						"additionalArguments": {
							"type": "string",
							"description": "Additional arguments to be added to the docker run command (separated by space)"
						}
					},
					"default": {
						"environmentVariables": {
							"XTERM": "xterm-256color"
						},
						"dns": "8.8.8.8",
						"detached": true,
						"privileged": true,
						"labels": {},
						"volumes": {},
						"additionalArguments": ""
					},
					"description": "Docker container run settings"
				},
				"cloudcode.active-kubeconfig": {
					"type": "string",
					"default": "",
					"markdownDescription": "Name of the active KubeConfig used by the extension. This name should match the name of a KubeConfig stored in `#cloudcode.kubeconfigs#`. If a name isn't provided, the default KubeConfig will be used."
				},
				"cloudcode.kubectlExecShell": {
					"type": "string",
					"default": "sh",
					"markdownDescription": "The shell to use when choosing 'Get Terminal' on a Pod in the Clusters Explorer. Commonly used choices include `sh` or `bash`."
				},
				"cloudcode.kubectlRequestTimeout": {
					"type": "string",
					"default": "5s",
					"description": "The length of time to wait before giving up on a single kubectl server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests."
				},
				"cloudcode.samplesBranch": {
					"type": "string",
					"default": "v1",
					"markdownDescription": "Branch to checkout from Google-maintained code sample repositories."
				},
				"cloudcode.enable1stPartyAuth": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Enable authentication using 1st party authentication. gcloud will be used to sign in if this setting is set to false and may require additional dependency to be installed.  **Changing this setting requires a reload of vscode. [Click here](command:workbench.action.reloadWindow) to reload**"
				},
				"cloudcode.beta.enableSkaffoldModules": {
					"type": "boolean",
					"default": true,
					"description": "Enable the new Skaffold modules integration for kubernetes applications.",
					"deprecationMessage": "This is no longer a beta feature"
				},
				"cloudcode.beta.enableBuildEnvironmentsInit": {
					"type": "boolean",
					"default": true,
					"description": "Enable setting up Build Environments on run/debug/deploy sessions.",
					"deprecationMessage": "This is no longer a beta feature"
				},
				"cloudcode.beta.enableSendLogs": {
					"type": "boolean",
					"default": true,
					"description": "Enables the ability to send logs on crashes and failures.",
					"deprecationMessage": "Internal feature flag."
				},
				"cloudcode.beta.enableApigeeExplorers": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Enable the Apigee explorers",
					"deprecationMessage": "Internal feature flag"
				},
				"cloudcode.beta.enableAwsLambdaImporter": {
					"type": "boolean",
					"default": false,
					"markdownDescription": "Enable the AwsLambdaImporter explorer",
					"deprecationMessage": "Internal feature flag."
				},
				"cloudcode.beta.enableGettingStartedPage": {
					"type": "boolean",
					"default": false,
					"markdownDescription": "Enable the Getting Started with CloudCode page",
					"deprecationMessage": "Internal feature flag."
				},
				"cloudcode.beta.skaffoldSubmitLogsFailureReasons": {
					"type": "array",
					"item": {
						"type": "string"
					},
					"default": [
						"unknown_failure"
					],
					"markdownDescription": "Enable submitting deployment logs on Skaffold errors of these types",
					"deprecationMessage": "Internal feature flag."
				},
				"cloudcode.beta.enableGcloudOnDemand": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Enable Installation of GCloud on demand",
					"deprecationMessage": "Internal feature flag."
				},
				"cloudcode.beta.enableSourceProtect": {
					"type": "boolean",
					"default": false,
					"markdownDescription": "Enable Source Protect",
					"deprecationMessage": "Internal feature flag."
				},
				"cloudcode.beta.enableCloudStorage": {
					"type": "boolean",
					"default": false,
					"markdownDescription": "Enable Cloud Storage integration",
					"deprecationMessage": "Internal feature flag."
				},
				"cloudcode.enableBuildpacks": {
					"type": "boolean",
					"default": true,
					"description": "Enable buildpacks.",
					"deprecationMessage": "Internal feature flag."
				},
				"cloudcode.beta.enableApigeeTrace": {
					"type": "boolean",
					"default": false,
					"markdownDescription": "Enable Apigee proxy tracing",
					"deprecationMessage": "Internal feature flag."
				},
				"cloudcode.beta.enableListnrOnly": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "The config key to route all Cloud Code feedback to Listnr",
					"deprecationMessage": "Internal feature flag."
				},
				"cloudcode.enableMultiSkaffoldConfigsKey": {
					"type": "boolean",
					"default": false,
					"description": "Enable support for multiple skaffold configurations."
				},
				"cloudcode.enableTelemetry": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Enable sending usage data to Google. Data collected is subject to the [Google Privacy Policy](https://policies.google.com/privacy)."
				},
				"cloudcode.updateAdcOnLogin": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Append a `—-update-adc` flag to `gcloud auth login`. [Read about this flag](https://cloud.google.com/sdk/gcloud/reference/auth/login#--update-adc)."
				},
				"cloudcode.updateChannel": {
					"type": "string",
					"enum": [
						"Default",
						"Insiders"
					],
					"markdownDescription": "Automatically install the insiders version of Cloud Code by changing this value to 'Insiders', or set the value as 'Default' to use the stable released version from the marketplace. [Learn more about Insiders builds](https://cloud.google.com/code/docs/vscode/insiders)."
				},
				"cloudcode.enableMinikubeGcpAuthPlugin": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Enable the [minikube gcp-auth plugin](https://minikube.sigs.k8s.io/docs/handbook/addons/gcp-auth/) when starting a Cloud Code run or debug session that is deploying to minikube."
				},
				"cloudcode.enableConfigLessExperience": {
					"type": "boolean",
					"default": false,
					"markdownDescription": "Enable the experimental config-less run/debug experience for Kubernetes and Cloud Run apps."
				},
				"cloudcode.yaml.trace.server": {
					"type": "string",
					"enum": [
						"off",
						"messages",
						"verbose"
					],
					"default": "off",
					"description": "Trace the communication between VSCode and the language server in an output window."
				},
				"cloudcode.yaml.schemas": {
					"type": "object",
					"default": {},
					"description": "Associate schemas to YAML files in the current workspace."
				},
				"cloudcode.yaml.format.enable": {
					"type": "boolean",
					"default": false,
					"description": "Enable default YAML formatter. **Changing this setting requires a reload of vscode. [Click here](command:workbench.action.reloadWindow) to reload**"
				},
				"cloudcode.yaml.format.singleQuote": {
					"type": "boolean",
					"default": false,
					"description": "Use single quotes instead of double quotes."
				},
				"cloudcode.yaml.format.bracketSpacing": {
					"type": "boolean",
					"default": true,
					"description": "Print spaces between brackets in objects."
				},
				"cloudcode.yaml.format.proseWrap": {
					"type": "string",
					"default": "preserve",
					"enum": [
						"preserve",
						"never",
						"always"
					],
					"enumDescriptions": [
						"Wrap prose; if it exceeds print-width.",
						"Never wrap; keep prose on the same line.",
						"Keep prose as-is."
					],
					"description": "Choose when to automatically wrap prose."
				},
				"cloudcode.yaml.validate": {
					"type": "boolean",
					"default": true,
					"description": "Enable validation feature."
				},
				"cloudcode.yaml.hover": {
					"type": "boolean",
					"default": true,
					"description": "Enable hover feature."
				},
				"cloudcode.yaml.completion": {
					"type": "boolean",
					"default": true,
					"description": "Enable YAML code completion."
				},
				"cloudcode.yaml.customTags": {
					"type": "array",
					"default": [],
					"description": "Custom tags the parser should recognize and validate against."
				},
				"cloudcode.yaml.clusterResourceCompletion": {
					"type": "boolean",
					"default": true,
					"description": "Enable resource completions from the active cluster. This setting may impact completion performance."
				},
				"cloudcode.yaml.yamlFileMatcher": {
					"type": "string",
					"default": "**/*.yaml",
					"markdownDescription": "Glob pattern matching YAML files in the workspace. YAML editing support such as completion, inline definitions, and linting would be available for this file type. Read more about glob patterns [here](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options)."
				},
				"cloudcode.yaml.enableKubernetesSupport": {
					"type": "boolean",
					"default": true,
					"description": "Enable Kubernetes YAML editing support."
				},
				"cloudcode.yaml.kubernetesVersion": {
					"type": "string",
					"default": "v1.28.0",
					"enum": [
						"v1.19.0",
						"v1.20.0",
						"v1.21.0",
						"v1.22.0",
						"v1.23.0",
						"v1.24.0",
						"v1.25.0",
						"v1.27.0",
						"v1.28.0"
					],
					"description": "Select the Kubernetes version Cloud Code should utilize when providing YAML editing support."
				},
				"cloudcode.yaml.crdSchemaLocations": {
					"type": "array",
					"item": {
						"type": "string"
					},
					"default": [],
					"markdownDescription": "Array of locations pointing to Kubernetes CRD schema. Each of these can be set to a local path (example: `/files/crd.yaml`) or URL (example: `http://github.com/user/repo/crd.yaml`)."
				},
				"cloudcode.cloudshell.project": {
					"type": "string",
					"default": "",
					"markdownDescription": "Default project to use in Cloud Shell. If not set, the existing default will be used or you will be prompted to set one. For more information on how to get started with developing in a Cloud Shell environment, view this [quickstart](https://cloud.google.com/code/docs/vscode/quickstart-remote-dev). This will also set the cloudcode.project setting to the same value.",
					"deprecationMessage": "Intended for internal use"
				},
				"cloudcode.autoDependencies": {
					"type": "string",
					"default": "on",
					"enum": [
						"on",
						"off"
					],
					"markdownDescription": "Automatically install and update required Cloud Code dependencies such as the [Cloud SDK](https://cloud.google.com/sdk/gcloud), [Skaffold](https://skaffold.dev/), [minikube](https://minikube.sigs.k8s.io/docs/), and [Kubectl](https://kubernetes.io/docs/reference/kubectl/overview/)."
				},
				"cloudcode.verboseLogging": {
					"type": "boolean",
					"default": false,
					"description": "Display extension debug information in the 'Cloud Code' output window."
				},
				"cloudcode.cloudSdkVerbosityLevel": {
					"type": "string",
					"default": "warning",
					"enum": [
						"debug",
						"info",
						"warning",
						"error",
						"critical",
						"none"
					],
					"description": "Display Cloud SDK debug information in the 'Cloud Code' output window."
				},
				"cloudcode.enableCustomApplications": {
					"type": "boolean",
					"default": true,
					"description": "Enable Custom Sample Application Support",
					"deprecationMessage": "Internal feature flag"
				},
				"cloudcode.customApplications": {
					"type": "array",
					"default": [],
					"items": {
						"type": "object",
						"properties": {
							"branchName": {
								"type": "string",
								"description": "Branch name in git repository",
								"default": ""
							},
							"repoUrl": {
								"type": "string",
								"description": "Git path pointing to the repository",
								"default": ""
							},
							"localPath": {
								"type": "string",
								"description": "Folder where the sample repository has been stored locally",
								"default": ""
							}
						}
					},
					"description": "List of custom samples in Cloud Code"
				},
				"cloudcode.useGcloudAuthSkaffold": {
					"type": "boolean",
					"default": false,
					"markdownDescription": "Use gcloud authentication for skaffold deployment"
				},
				"cloudcode.enableGkeAutopilotSupport": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Enable deployment support for GKE-Autopilot clusters"
				},
				"cloudcode.enableCrashReporting": {
					"type": "boolean",
					"default": true,
					"description": "Enable reporting unexpected Cloud Code crashes to Google",
					"deprecationMessage": "Internal feature flag."
				},
				"cloudcode.showWelcomeOrReleaseNotes": {
					"type": "boolean",
					"default": true,
					"description": "Enable displaying welcome and release notes on first use of cloud code and subsequent updates.",
					"deprecationMessage": "Internal feature flag."
				},
				"cloudcode.sourceprotect.progress": {
					"type": "string",
					"default": "startup",
					"enum": [
						"never",
						"startup",
						"always"
					],
					"enumDescriptions": [
						"Never show progress indicator while scanning for vulnerabilities.",
						"Only show progress indicator on first scan for vulnerabilities.",
						"Always show progress indicator while scanning for vulnerabilities."
					],
					"deprecationMessage": "Internal feature flag"
				},
				"cloudcode.sourceprotect.npm": {
					"type": "boolean",
					"default": true,
					"description": "npm vulnerability scanning.",
					"deprecationMessage": "Internal feature flag."
				},
				"cloudcode.sourceprotect.maven": {
					"type": "boolean",
					"default": true,
					"description": "Maven vulnerability scanning.",
					"deprecationMessage": "Internal feature flag."
				},
				"cloudcode.sourceprotect.gomod": {
					"type": "boolean",
					"default": true,
					"description": "Go Modules vulnerability scanning.",
					"deprecationMessage": "Internal feature flag."
				},
				"cloudcode.sourceprotect.vulnerability_grouping": {
					"type": "string",
					"description": "Vulnerability grouping (experimental).",
					"default": "none",
					"enum": [
						"none",
						"by_package"
					],
					"enumDescriptions": [
						"No grouping.",
						"Group vulnerabilities by affected package."
					],
					"deprecationMessage": "Internal feature flag."
				},
				"cloudcode.sourceprotect.policy_location": {
					"type": "string",
					"description": "Path to project policy config file. This path may be relative to the workspace or absolute. Can also be a URI (http://xxx, gs://xxx)",
					"default": "sp.yaml",
					"deprecationMessage": "Internal feature flag."
				},
				"cloudcode.migrateToContainers.mfitExecutable": {
					"type": "string",
					"description": "Path to mfit executable binary.",
					"default": "mfit",
					"tags": [
						"migrate",
						"tool-path"
					]
				},
				"cloudcode.migrateToContainers.m2cExecutable": {
					"type": "string",
					"description": "Path to m2c executable binary.",
					"default": "m2c",
					"tags": [
						"migrate",
						"tool-path"
					]
				},
				"cloudcode.dependencyPaths": {
					"type": "object",
					"properties": {
						"gcloud": {
							"type": "string",
							"description": "Filesystem path to the Google Cloud CLI.",
							"default": ""
						},
						"kubectl": {
							"type": "string",
							"description": "Filesystem path to Kubectl.",
							"default": ""
						},
						"skaffold": {
							"type": "string",
							"description": "Filesystem path to Skaffold.",
							"default": ""
						},
						"minikube": {
							"type": "string",
							"description": "Filesystem path to Minikube.",
							"default": ""
						}
					},
					"additionalProperties": false,
					"markdownDescription": "Filesystem paths to the binaries Cloud Code has a dependency on. If not set, Cloud Code will attempt to find the binary in the `PATH` or use the managed version of the binary, depending on the value of the `cloudcode.autoDependencies` setting. A path must include the `.exe` extension if on Windows."
				},
				"cloudcode.duetAI.enableSalesBlurb": {
					"type": "boolean",
					"default": true,
					"deprecationMessage": "Internal feature flag",
					"markdownDeprecationMessage": "Determines if the Duet AI sales blurb should be shown on the welcome page when Duet is disabled."
				},
				"cloudcode.duetAI.enable": {
					"type": "boolean",
					"default": false,
					"markdownDescription": "Enable Duet AI for developers.  Duet AI in Google Cloud is your AI-powered collaborator, so you can accomplish tasks efficiently. Duet AI does not use your prompts or its responses as data to train its model. [Learn more](https://cloud.google.com/duet-ai/docs/discover/data-governance)\n\n**Note:**  Changing this setting requires a reload of vscode. [Click here](command:workbench.action.reloadWindow) to reload."
				},
				"cloudcode.duetAI.enableChat": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Enable Duet AI Chat.\n\n**Note:**  Changing this setting requires a reload of vscode. [Click here](command:workbench.action.reloadWindow) to reload."
				},
				"cloudcode.duetAI.project": {
					"type": "string",
					"markdownDescription": "The GCP project to use when sending requests to Duet AI"
				},
				"cloudcode.duetAI.inlineSuggestions.enableAuto": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Enable automatically providing inline suggestions. If set to false, inline suggestions can still be obtained manually with the 'Trigger Inline Suggestion' command (creating a keybind is recommended)."
				},
				"cloudcode.duetAI.languages": {
					"type": "array",
					"markdownDescription": "The list of language identifiers to request inline completions.\n\n**Note:**  Changing this setting requires a reload of vscode. [Click here](command:workbench.action.reloadWindow) to reload.",
					"uniqueItems": true,
					"default": [],
					"items": {
						"type": "string",
						"enum": [
							"abap",
							"bat",
							"bibtex",
							"c",
							"clojure",
							"coffeescript",
							"cpp",
							"csharp",
							"css",
							"cuda-cpp",
							"dart",
							"diff",
							"dockercompose",
							"dockerfile",
							"fsharp",
							"git-commit",
							"git-rebase",
							"go",
							"groovy",
							"haml",
							"handlebars",
							"html",
							"ini",
							"jade",
							"java",
							"javascript",
							"javascriptreact",
							"json",
							"jsonc",
							"jsonl",
							"kotlin",
							"latex",
							"less",
							"lookml",
							"lua",
							"makefile",
							"markdown",
							"objective-c",
							"objective-cpp",
							"perl",
							"perl6",
							"php",
							"plaintext",
							"powershell",
							"pug",
							"python",
							"r",
							"razor",
							"ruby",
							"rust",
							"sass",
							"scss",
							"scala",
							"shaderlab",
							"shellscript",
							"slim",
							"sql",
							"stylus",
							"swift",
							"terraform-vars",
							"terraform",
							"tex",
							"tf",
							"tfvars",
							"typescript",
							"typescriptreact",
							"vue",
							"vue-html",
							"xml",
							"xsl",
							"yaml"
						]
					}
				},
				"cloudcode.compute.sshInternalIp": {
					"type": "boolean",
					"default": false,
					"description": "Connect to Compute instances using their internal IP addresses rather than their external IP addresses. Use this to connect from one instance to another on the same VPC network, over a VPN connection, or between two peered VPC networks."
				}
			}
		},
		"debuggers": [
			{
				"type": "cloudcode",
				"label": "Cloud Code",
				"configurationAttributes": {
					"attach": {
						"properties": {
							"language": {
								"type": "string",
								"enum": [
									"Node",
									"NETCore",
									"Java",
									"Python",
									"Go"
								],
								"description": "Programming language of the application being debugged.",
								"default": null
							},
							"debugPort": {
								"type": "number",
								"description": "Debug Port used on the container.",
								"default": 9229
							},
							"remoteRoot": {
								"type": "string",
								"description": "Absolute path to the remote directory containing the program",
								"default": "Path to the Remote Directory Containing the Program"
							},
							"podSelector": {
								"type": "object",
								"description": "Selector to choose debugging pod. Usually a dictionary where key is app and value is the name of the deployment will suffice. See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/ for more information.",
								"default": {
									"app": "deployment-name"
								}
							},
							"localRoot": {
								"type": "string",
								"description": "Path to the local directory containing the program",
								"default": "^\"\\${workspaceFolder}\""
							},
							"containerName": {
								"type": "string",
								"description": "Name of the container to be debugged. This field will only be used if more than one container is found in the pod.",
								"default": "container-name"
							},
							"protocol": {
								"type": "string",
								"enum": [
									"auto",
									"inspector",
									"legacy"
								],
								"description": "Node.js debug protocol used",
								"default": "auto"
							}
						}
					}
				}
			},
			{
				"type": "cloudcode.kubernetes",
				"label": "Cloud Code: Kubernetes",
				"configurationAttributes": {
					"launch": {
						"properties": {
							"skaffoldConfig": {
								"type": "string",
								"description": "Path to the skaffold configuration file used for running the app.",
								"default": "${workspaceFolder}/skaffold.yaml"
							},
							"profile": {
								"type": "string",
								"description": "Name of the skaffold profile. Remove this field to use the default profile.",
								"default": "profile-name"
							},
							"imageRegistry": {
								"type": "string",
								"description": "Image registry to push the container images to. For example, gcr.io/{Google Cloud Project ID} or docker.io/{Repository Name}",
								"default": "gcr.io/${gcpProjectId}"
							},
							"watch": {
								"type": "boolean",
								"description": "Watches for changes in the workspace and re-runs the application. Defaults to true.",
								"default": true
							},
							"cleanUp": {
								"type": "boolean",
								"description": "Deployed kubernetes resources will be cleaned up after the application is terminated. Defaults to true.",
								"default": true
							},
							"autoStop": {
								"type": "boolean",
								"description": "Minikube clusters started automatically by Cloud Code will stop after the user is done with the extension. Defaults to true.",
								"default": true
							},
							"portForward": {
								"type": "boolean",
								"description": "Forwards ports for exposed kubernetes resources on the cluster to your local machine. Defaults to true.",
								"default": true
							},
							"resourceDeletionTimeoutMins": {
								"type": "number",
								"description": "Timeout in minutes for skaffold to wait on resource deletions before redeploying.",
								"default": 2
							},
							"skaffoldFlags": {
								"type": "object",
								"description": "Skaffold flags",
								"properties": {
									"modules": {
										"type": "array",
										"item": {
											"type": "string"
										},
										"description": "skaffold modules"
									}
								}
							},
							"debug": {
								"type": "array",
								"items": {
									"properties": {
										"image": {
											"type": "string",
											"description": "The name of the container image."
										},
										"sourceFileMap": {
											"type": "object",
											"description": "Path mapping used by the debugger. The key is the local path and the value is the path on the remote container.",
											"default": {
												"${workspaceFolder}": "${containerAppRoot}"
											}
										}
									}
								},
								"description": "An array of image names and their respective source paths mapped from a local source. Any additional fields will be passed along to the respective language debugger. For example, justMyCode for the Python debugger.",
								"default": []
							}
						}
					},
					"attach": {
						"properties": {
							"language": {
								"type": "string",
								"enum": [
									"Node",
									"NETCore",
									"Java",
									"Python",
									"Go"
								],
								"description": "Programming language of the application being debugged.",
								"default": null
							},
							"debugPort": {
								"type": "number",
								"description": "Debug Port used on the container.",
								"default": 9229
							},
							"remoteRoot": {
								"type": "string",
								"description": "Absolute path to the remote directory containing the program",
								"default": "Path to the Remote Directory Containing the Program"
							},
							"podSelector": {
								"type": "object",
								"description": "Selector to choose debugging pod. Usually a dictionary where key is app and value is the name of the deployment will suffice. See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/ for more information.",
								"default": {
									"app": "deployment-name"
								}
							},
							"localRoot": {
								"type": "string",
								"description": "Path to the local directory containing the program",
								"default": "^\"\\${workspaceFolder}\""
							},
							"containerName": {
								"type": "string",
								"description": "Name of the container to be debugged. This field will only be used if more than one container is found in the pod.",
								"default": "container-name"
							},
							"protocol": {
								"type": "string",
								"enum": [
									"auto",
									"inspector",
									"legacy"
								],
								"description": "Node.js option: debug protocol to use",
								"default": "auto"
							},
							"justMyCode": {
								"type": "boolean",
								"description": "Python option: debug only user-written code.",
								"default": true
							}
						}
					}
				},
				"configurationSnippets": [
					{
						"label": "Cloud Code: Run/Debug Kubernetes App",
						"description": "Configuration for running or debugging an app on a Kubernetes cluster",
						"body": {
							"name": "Kubernetes: Run/Debug",
							"type": "cloudcode.kubernetes",
							"request": "launch",
							"skaffoldConfig": "^\"\\${workspaceFolder}/skaffold.yaml\"",
							"watch": true,
							"cleanUp": true,
							"portForward": true
						}
					},
					{
						"label": "Cloud Code: Attach (NodeJS) to k8s Pod",
						"description": "Configuration for attaching a debugger to a kubernetes pod (NodeJS)",
						"body": {
							"name": "Attach to Kubernetes Pod (NodeJS)",
							"type": "cloudcode.kubernetes",
							"request": "attach",
							"language": "Node",
							"debugPort": 9229,
							"podSelector": {
								"app": "deployment-name"
							},
							"localRoot": "^\"\\${workspaceFolder}\"",
							"remoteRoot": "Path to the Remote Directory Containing the Program"
						}
					},
					{
						"label": "Cloud Code: Attach (.NET Core) to k8s Pod",
						"description": "Configuration for attaching a debugger to a kubernetes pod (.NET Core)",
						"body": {
							"name": "Attach to Kubernetes Pod (.NET Core)",
							"type": "cloudcode.kubernetes",
							"request": "attach",
							"language": "NETCore",
							"podSelector": {
								"app": "deployment-name"
							},
							"localRoot": "^\"\\${workspaceFolder}\"",
							"remoteRoot": "Path to the Remote Directory Containing the Program"
						}
					},
					{
						"label": "Cloud Code: Attach (Java) to k8s Pod",
						"description": "Configuration for attaching a debugger to a kubernetes pod (Java)",
						"body": {
							"name": "Attach to Kubernetes Pod (Java)",
							"type": "cloudcode.kubernetes",
							"request": "attach",
							"language": "Java",
							"debugPort": 50005,
							"podSelector": {
								"app": "deployment-name"
							}
						}
					},
					{
						"label": "Cloud Code: Attach (Python) to k8s Pod",
						"description": "Configuration for attaching a debugger to a kubernetes pod (Python)",
						"body": {
							"name": "Attach to Kubernetes Pod (Python)",
							"type": "cloudcode.kubernetes",
							"request": "attach",
							"language": "Python",
							"debugPort": 3000,
							"podSelector": {
								"app": "deployment-name"
							},
							"localRoot": "^\"\\${workspaceFolder}\"",
							"remoteRoot": "Path to the Remote Directory Containing the Program"
						}
					},
					{
						"label": "Cloud Code: Attach (Go) to k8s Pod",
						"description": "Configuration for attaching a debugger to a kubernetes pod (Go)",
						"body": {
							"name": "Attach to Kubernetes Pod (Go)",
							"type": "cloudcode.kubernetes",
							"request": "attach",
							"language": "Go",
							"debugPort": 2345,
							"podSelector": {
								"app": "deployment-name"
							},
							"localRoot": "^\"\\${workspaceFolder}\"",
							"remoteRoot": "Path to the Remote Directory Containing the Program"
						}
					}
				]
			},
			{
				"type": "cloudcode.cloudrun",
				"label": "Cloud Code: Cloud Run",
				"configurationAttributes": {
					"launch": {
						"properties": {
							"service": {
								"type": "object",
								"description": "Service Settings",
								"properties": {
									"name": {
										"type": "string",
										"description": "Name of the service",
										"default": "service-name"
									},
									"containerPort": {
										"type": "number",
										"description": "Container Port",
										"default": 8080
									},
									"serviceAccountName": {
										"type": "string",
										"description": "Service Account",
										"default": ""
									},
									"env": {
										"type": "array",
										"description": "Environment Variables",
										"items": {
											"type": "object",
											"description": "Environment Variable",
											"properties": {
												"name": {
													"type": "string",
													"description": "name",
													"default": ""
												},
												"value": {
													"type": "string",
													"description": "value",
													"default": ""
												}
											}
										},
										"default": []
									},
									"cloudSqlInstances": {
										"type": "array",
										"description": "Cloud Sql Instances",
										"default": []
									},
									"resources": {
										"type": "object",
										"description": "resources",
										"properties": {
											"limits": {
												"type": "object",
												"description": "limits",
												"properties": {
													"cpu": {
														"type": "number",
														"description": "Container CPU limit. Limit is expressed as a number of CPU. Fractional CPU limits are allowed (e.g. 1.5).",
														"default": 1
													},
													"memory": {
														"type": "string",
														"description": "Memory in MiB",
														"default": "256Mi"
													}
												},
												"default": {
													"memory": "256Mi"
												}
											}
										},
										"default": {
											"limits": {
												"memory": "256Mi"
											}
										}
									}
								}
							},
							"image": {
								"type": "string",
								"description": "Name of the image",
								"default": "image-name"
							},
							"build": {
								"type": "object",
								"description": "Build Settings. Specify one of [docker, jib, buildpacks].",
								"properties": {
									"docker": {
										"type": "object",
										"description": "Builds image from a Dockerfile",
										"properties": {
											"path": {
												"type": "string",
												"description": "Dockerfile path",
												"default": "${workspaceFolder}/Dockerfile"
											},
											"target": {
												"type": "string",
												"description": "Dockerfile target name to build",
												"default": ""
											},
											"buildArgs": {
												"type": "object",
												"description": "Arguments passed to the docker build",
												"default": {}
											}
										}
									},
									"jibMaven": {
										"type": "object",
										"description": "Builds image using the Jib Maven Plugin",
										"properties": {
											"path": {
												"type": "string",
												"description": "Build file path. Ex: pom.xml, .mvn directory",
												"default": "${workspaceFolder}/pom.xml"
											},
											"project": {
												"type": "string",
												"description": "Java Project name. Ex: org.springframework.boot:frontend",
												"default": ""
											}
										}
									},
									"jibGradle": {
										"type": "object",
										"description": "Builds image using the Jib Gradle Plugin",
										"properties": {
											"path": {
												"type": "string",
												"description": "Build file path. Ex: build.gradle, gradle.properties, settings.gradle or the Gradle wrapper script (gradlew, gradlew.bat, or gradlew.cmd)",
												"default": "${workspaceFolder}/build.gradle"
											},
											"project": {
												"type": "string",
												"description": "Java Project name. Ex: org.springframework.boot:frontend",
												"default": ""
											}
										}
									},
									"buildpacks": {
										"type": "object",
										"description": "Builds image using Cloud Native Buildpacks",
										"properties": {
											"path": {
												"type": "string",
												"description": "Entry point file path.",
												"default": "${workspaceFolder}/package.json"
											},
											"builder": {
												"type": "string",
												"description": "Builder image used",
												"default": "heroku/buildpacks"
											},
											"env": {
												"type": "array",
												"description": "Environment Variables",
												"items": {
													"type": "object",
													"description": "Environment Variable",
													"properties": {
														"name": {
															"type": "string",
															"description": "name",
															"default": ""
														},
														"value": {
															"type": "string",
															"description": "value",
															"default": ""
														}
													}
												},
												"default": [
													{
														"name": "",
														"value": ""
													}
												]
											}
										}
									}
								}
							},
							"target": {
								"type": "object",
								"description": "Target to run the app. Only minikube is currently supported.",
								"properties": {
									"minikube": {
										"type": "object",
										"description": "Cloud Code managed minikube.",
										"properties": {}
									}
								},
								"default": {
									"minikube": {}
								}
							},
							"watch": {
								"type": "boolean",
								"description": "Watches for changes in the workspace and re-runs the application. Defaults to true.",
								"default": true
							},
							"autoStop": {
								"type": "boolean",
								"description": "Minikube clusters started automatically by Cloud Code will stop after the user is done with the extension. Defaults to true.",
								"default": true
							},
							"debug": {
								"type": "object",
								"description": "Debug Settings",
								"properties": {
									"sourceFileMap": {
										"type": "object",
										"description": "Path mapping used by the debugger. The key is the local path and the value is the path on the remote container.",
										"default": {
											"${workspaceFolder}": "${containerAppRoot}"
										}
									}
								}
							},
							"externalPortForward": {
								"type": "number",
								"markdownDescription": "When this is set, Cloud Code will port forward a version of the service to `0.0.0.0` so it is accessible to other devices on the network. This is useful for debugging your service on mobile devices."
							}
						}
					}
				},
				"configurationSnippets": [
					{
						"label": "Cloud Code: Run/Debug Cloud Run App",
						"description": "Configuration for running and debugging a Cloud Run app locally",
						"body": {
							"name": "Cloud Run: Run/Debug Locally",
							"type": "cloudcode.cloudrun",
							"request": "launch",
							"build": {
								"docker": {
									"path": "${1:Dockerfile}"
								}
							},
							"image": "^\"\\${workspaceFolderBasename}\"",
							"service": {
								"name": "^\"\\${workspaceFolderBasename}\"",
								"containerPort": 8080,
								"resources": {
									"limits": {
										"memory": "256Mi"
									}
								}
							},
							"target": {
								"minikube": {}
							},
							"watch": true
						}
					}
				]
			},
			{
				"type": "cloudcode.cloudfunctions",
				"label": "Cloud Code: Cloud Functions",
				"configurationAttributes": {
					"launch": {
						"properties": {
							"name": {
								"type": "string",
								"description": "Name of the service",
								"default": "Deploy Cloud Function"
							},
							"functionName": {
								"type": "string",
								"description": "Name of the function to be deployed. (Name must start with a letter followed by up to 62 letters, numbers, hyphens, or underscores and must end with a letter or a number)",
								"default": ""
							},
							"region": {
								"type": "string",
								"markdownDescription": "The location this function will be deployed to. **Region can only be set at creation time.**",
								"default": ""
							},
							"gen": {
								"type": "string",
								"markdownDescription": "`GEN_1` or `GEN_2`. [Click here to see differences between Gen 2 and Gen 1 functions.](https://cloud.google.com/functions/docs/concepts/version-comparison)",
								"default": ""
							},
							"revision": {
								"type": "string",
								"description": "The revision of the locally downloaded Cloud Function.",
								"default": ""
							},
							"runtime": {
								"type": "string",
								"description": "Runtime for the function. Can be changed after deployment.",
								"default": ""
							},
							"entryPoint": {
								"type": "string",
								"description": "Entry point to your code, e.g. the exported function name.",
								"default": ""
							},
							"directory": {
								"type": "string",
								"description": "The subdirectory in this workspace containing the function.",
								"default": "."
							},
							"testInput": {
								"type": "string",
								"description": "The test input for the Cloud Function",
								"default": ""
							}
						}
					}
				}
			}
		],
		"walkthroughs": [
			{
				"id": "one-activity-bar",
				"title": "Customize Cloud Code Sidebar",
				"description": "Customize the views that appear in the Cloud Code sidebar",
				"steps": [
					{
						"id": "one_activity_bar",
						"title": "Unified activity bar",
						"description": "All explorers are consolidated into a single Activity bar icon.",
						"media": {
							"image": "images/walkthrough/one_activity_bar.png",
							"altText": "Unified Activity Bar"
						}
					},
					{
						"id": "project_selector",
						"title": "Use the Project Selector status bar item",
						"description": "The project selector in the bottom status bar applies to all Cloud Code explorers.",
						"media": {
							"image": "images/walkthrough/project_selector.png",
							"altText": "New Project Selector status bar item"
						}
					},
					{
						"id": "hide_show_view",
						"title": "Hide and show explorer views",
						"description": "The top Cloud Code More menu (three dots) lets you choose which views are shown.",
						"media": {
							"image": "images/walkthrough/show_hide_explorers.gif",
							"altText": "Show & Hide explorers"
						}
					},
					{
						"id": "rearrange_view",
						"title": "Rearrange views",
						"description": "You can drag explorers to reorder them in the Cloud Code activity bar.",
						"media": {
							"image": "images/walkthrough/reorder_explorers.gif",
							"altText": "Reorder explorers"
						}
					},
					{
						"id": "split_explorers",
						"title": "Move a view to other activity bar",
						"description": "You can drag an explorer to a different activity bar to create your own layout.",
						"media": {
							"image": "images/walkthrough/split_explorers.gif",
							"altText": "Move a view to other activity bar"
						}
					}
				]
			},
			{
				"id": "duet-ai",
				"title": "Code with Duet AI",
				"description": "Boost your productivity and code quality with Duet AI",
				"when": "config.cloudcode.duetAI.enable",
				"steps": [
					{
						"id": "connect-signed-out",
						"when": "!authLoggedIn",
						"title": "Connect with Google Cloud",
						"description": "Connect your Google Cloud account to access the AI powered features and get the most out of your development experience.\n[Connect](command:cloudcode.walkthrough.signin)",
						"media": {
							"svg": "images/walkthrough/duet_ai/connect.svg",
							"altText": "Connect with Google Cloud via the Cloud Code status bar"
						}
					},
					{
						"id": "connect-signed-in",
						"when": "authLoggedIn",
						"title": "Connect with Google Cloud",
						"description": "Connect your Google Cloud account to access the AI powered features and get the most out of your development experience.\n\n__$(check) You are signed in__",
						"media": {
							"svg": "images/walkthrough/duet_ai/connect.svg",
							"altText": "Connect with Google Cloud via the Cloud Code status bar"
						}
					},
					{
						"id": "project-signed-out",
						"when": "!authLoggedIn",
						"title": "Activate Duet AI",
						"description": "To activate Duet AI in your IDE, you need to select a Google Cloud project with the Cloud AI Companion API enabled\n\nDuet AI doesn't use your prompts or its responses as data to train its model.\n\nYou must [connect with Google Cloud](command:cloudcode.walkthrough.signin) to set a project.",
						"media": {
							"svg": "images/walkthrough/duet_ai/activate.svg",
							"altText": "Activate Duet AI to begin using Duet AI features"
						}
					},
					{
						"id": "project-signed-in",
						"when": "authLoggedIn",
						"title": "Activate Duet AI",
						"description": "To activate Duet AI in your IDE, you need to select a Google Cloud project with the Cloud AI Companion API enabled.\n\nDuet AI doesn't use your prompts or its responses as data to train its model.\n[Select Google Cloud Project](command:_cloudcode.duetAI.setProject)",
						"media": {
							"svg": "images/walkthrough/duet_ai/activate.svg",
							"altText": "Activate Duet AI to begin using Duet AI features"
						}
					},
					{
						"id": "generation",
						"title": "Code Generation",
						"description": "Duet AI improves your code quality and saves time by autocompleting code. It can generate code based on natural language descriptions and help you learn new programming languages. [Learn more](https://cloud.google.com/code/docs/vscode/write-code-duet-ai?_gl=1*ry39ax*_ga*MTY4MjQ1NDk1My4xNjkzMjQwMDMw*_ga_4LYFWVHBEB*MTY5MzMzMjk0OC4xLjEuMTY5MzMzMjk2NC4wLjAuMA).**\n[Open Settings](command:_cloudcode.duetAI.openConfiguration)\n__**Tip:** Use keyboard shortcuts to accept code suggestions.__",
						"media": {
							"svg": "images/walkthrough/duet_ai/code_generation.svg",
							"altText": "Code Generation through Duet AI"
						}
					},
					{
						"id": "chat",
						"when": "config.cloudcode.duetAI.enableChat",
						"title": "Chat with Duet AI",
						"description": "Duet AI is capable of holding conversations, answering questions, and generating content to improve your coding experience.\n[Open Chat](command:_cloudcode.duetAI.focusChat)",
						"media": {
							"svg": "images/walkthrough/duet_ai/chat.svg",
							"altText": "Duet AI brings chat to the IDE"
						}
					}
				]
			},
			{
				"id": "apigee-duet-ai",
				"title": "Duet AI in Apigee",
				"description": "Duet AI in Apigee is a powerful new tool that can help you create API specifications from scratch in seconds.",
				"when": "config.cloudcode.duetAI.apigee.enable",
				"steps": [
					{
						"id": "magic_wand_button",
						"title": "Start with Duet AI",
						"description": "Click the Start with Duet AI button to load the generative AI tools.",
						"media": {
							"image": "images/walkthrough/duet_ai_apigee/duetai-apigee-1.svg",
							"altText": "Unified Activity Bar"
						}
					},
					{
						"id": "enter_prompt",
						"title": "Enter your prompt",
						"description": "Provide a few details about your API, such as its name, endpoints, and methods, and Duet AI in Apigee automatically generates a complete API specification.",
						"media": {
							"image": "images/walkthrough/duet_ai_apigee/duetai-apigee-2.svg",
							"altText": "Input box"
						}
					},
					{
						"id": "api_design_experience",
						"title": "API design experience",
						"description": "Use the Duet AI in Apigee API design experience's powerful tools to review the API, including a code editor with inline code assistance and quick fixes, and an API visualization panel.",
						"media": {
							"image": "images/walkthrough/duet_ai_apigee/duetai-apigee-3.svg",
							"altText": "Swagger UI"
						}
					},
					{
						"id": "quick_actions",
						"title": "Quick actions",
						"description": "Once you are satisfied with your API specification, Duet AI in Apigee provides quick actions to help you move your API from design to production, such as registering to API hub, testing with a mock server, and more.",
						"media": {
							"image": "images/walkthrough/duet_ai_apigee/duetai-apigee-4.svg",
							"altText": "Quick Action buttons"
						}
					}
				]
			}
		],
		"commands": [
			{
				"command": "cloudcode.gcloudInstallGuide",
				"title": "Open Google Cloud CLI Install Guide",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.refreshKubectlExplorer",
				"title": "Refresh Kubernetes Explorer",
				"icon": "$(refresh)",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.setupKubectlClusterProxy",
				"title": "Set up Kubectl Proxying for cluster",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.cancelKubectlClusterProxy",
				"title": "Cancel Kubectl Proxying for cluster",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.gke.setupPrivateNodesCloudNat",
				"title": "Grant private GKE nodes outbound internet access",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.openKubeDocs",
				"title": "Open Documentation",
				"icon": "$(question)",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.refreshCloudRunExplorer",
				"title": "Refresh Cloud Run Service Explorer",
				"icon": "$(refresh)",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.refreshSecretsExplorer",
				"title": "Refresh Secrets Explorer",
				"icon": "$(refresh)",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.refreshGceExplorer",
				"title": "Refresh Compute Engine Explorer",
				"icon": "$(refresh)",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.refreshGcfExplorer",
				"title": "Refresh Cloud Functions Explorer",
				"icon": "$(refresh)",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.functions.openConfig",
				"title": "Open launch config",
				"icon": "$(gear)",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.functions.annotateWorkspace",
				"title": "Add new cloud function configuration",
				"icon": "$(pencil)",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.refreshAwsLambdaImporterExplorer",
				"title": "Refresh AwsLambdaImporter Explorer",
				"icon": "$(refresh)",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.compute.ui.vm.open.in.console",
				"title": "Open in Cloud Console",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.compute.ui.vm.firewall.open.in.console",
				"title": "Open in Cloud Console",
				"category": "Cloud Code",
				"icon": "$(link-external)"
			},
			{
				"command": "cloudcode.compute.ui.vm.disk.open.in.console",
				"title": "Open in Cloud Console",
				"category": "Cloud Code",
				"icon": "$(link-external)"
			},
			{
				"command": "cloudcode.gce.sshVmInstance",
				"title": "Open SSH",
				"icon": "$(terminal)",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.gce.scpVmInstance",
				"title": "Upload File via SCP",
				"icon": "$(cloud-upload)",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.functions.openInConsole",
				"title": "Open in Cloud Console",
				"category": "Cloud Code",
				"icon": "$(link-external)"
			},
			{
				"command": "cloudcode.functions.editInConsole",
				"title": "Edit Metadata in Cloud Console",
				"category": "Cloud Code",
				"icon": "$(edit)"
			},
			{
				"command": "cloudcode.switchKubeConfig",
				"title": "Switch KubeConfig",
				"icon": {
					"light": "images/light/switch.svg",
					"dark": "images/dark/switch.svg"
				},
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.kubernetes.openClusterInProviderPortal",
				"title": "Open in Cloud Console",
				"category": "Cloud Code",
				"icon": "$(link-external)"
			},
			{
				"command": "cloudcode.sharedExplorer.chooseProject",
				"title": "Switch Project",
				"icon": {
					"light": "images/light/switch.svg",
					"dark": "images/dark/switch.svg"
				},
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.openKubeconfig",
				"title": "Open File",
				"icon": "$(link-external)",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.removeKubeConfig",
				"title": "Remove from List",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.removeKubeConfigCommandPalette",
				"title": "Remove KubeConfig from Kubernetes Explorer",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.refreshKubectlCollection",
				"title": "Refresh",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.setKubectlCluster",
				"title": "Set as Active Cluster",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.setKubectlContext",
				"title": "Set as Active Context",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.setKubectlNamespace",
				"title": "Set as Active Namespace",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.deleteKubectlResource",
				"title": "Delete",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.describeKubectlResource",
				"title": "Describe",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.toggleApiExplorerCategories",
				"title": "Toggle Categories",
				"category": "Cloud Code",
				"icon": "$(list-unordered)"
			},
			{
				"command": "cloudcode.searchApi",
				"title": "Search for API",
				"category": "Cloud Code",
				"icon": "$(search)"
			},
			{
				"command": "cloudcode.commandpalette.searchApi",
				"title": "Search for API",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.statusbar.searchApi",
				"title": "Search for API",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.metricsKubectlResource",
				"title": "View Metrics",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.getKubectlContainerTerminal",
				"title": "Get Terminal",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.openKubernetesDashboard",
				"title": "Open Kubernetes Dashboard",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.copyResourceValue",
				"title": "Copy Resource Name",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.copyLeafValue",
				"title": "Copy Value",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.applyTriggerYaml",
				"title": "Apply Trigger",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.openKubectlAddress",
				"title": "Open Address",
				"category": "Cloud Code",
				"icon": "$(link-external)"
			},
			{
				"command": "cloudcode.diffConfiguration",
				"title": "Diff Current JSON/YAML File with K8s Deployed Resource",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.createConfiguration",
				"title": "Create Kubernetes Resource from Current File",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.applyConfiguration",
				"title": "Apply Current JSON/YAML File to K8s Deployed Resource",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.deleteKubectlCluster",
				"title": "Remove Context Under Cluster",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.manageCustomRepos",
				"title": "Manage Custom Sample Repositories",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.deleteKubectlContext",
				"title": "Remove Context",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.createK8sAppExplorerTitle",
				"title": "Open a Kubernetes Sample",
				"category": "Cloud Code",
				"icon": "$(new-folder)"
			},
			{
				"command": "cloudcode.runK8sAppExplorerTitle",
				"title": "Run App",
				"category": "Cloud Code",
				"icon": "$(play)"
			},
			{
				"command": "cloudcode.debugK8sAppExplorerTitle",
				"title": "Debug App",
				"category": "Cloud Code",
				"icon": "$(debug)"
			},
			{
				"command": "cloudcode.createNewApp",
				"title": "New Application",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.createCloudRunAppExplorerTitle",
				"title": "Create New Cloud Run App",
				"category": "Cloud Code",
				"icon": "$(new-folder)"
			},
			{
				"command": "cloudcode.runCloudRunAppExplorerTitle",
				"title": "Run App on Local Cloud Run Emulator",
				"category": "Cloud Code",
				"icon": "$(play)"
			},
			{
				"command": "cloudcode.debugCloudRunAppExplorerTitle",
				"title": "Debug App on Local Cloud Run Emulator",
				"category": "Cloud Code",
				"icon": "$(debug)"
			},
			{
				"command": "cloudcode.cloudRunOpenDocs",
				"title": "Open Documentation",
				"category": "Cloud Code",
				"icon": "$(question)"
			},
			{
				"command": "cloudcode.cloudRunDeployRevision",
				"title": "Deploy to Cloud Run",
				"category": "Cloud Code",
				"icon": "$(cloud-upload)"
			},
			{
				"command": "cloudcode.cloudRunDeployService",
				"title": "Deploy to Cloud Run",
				"category": "Cloud Code",
				"icon": "$(cloud-upload)"
			},
			{
				"command": "cloudcode.cloudRunOpenInConsole",
				"title": "Open in Cloud Console",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.cloudRunOpenEndpoint",
				"title": "Open URL",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.cloudRunOpenContainerImage",
				"title": "Open Container Image URL",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.functions.create",
				"title": "Create function",
				"category": "Cloud Code",
				"icon": "$(add)"
			},
			{
				"command": "cloudcode.functions.deploy",
				"title": "Deploy function",
				"category": "Cloud Code",
				"icon": "$(cloud-upload)"
			},
			{
				"command": "cloudcode.functions.deployFunction",
				"title": "Deploy function",
				"category": "Cloud Code",
				"icon": "$(cloud-upload)"
			},
			{
				"command": "cloudcode.functions.showLocalFiles",
				"title": "Reveal in File Explorer View",
				"category": "Cloud Code",
				"icon": "$(folder-opened)"
			},
			{
				"command": "cloudcode.functions.downloadSourceCode",
				"title": "Download to new workspace",
				"category": "Cloud Code",
				"icon": "$(cloud-download)"
			},
			{
				"command": "cloudcode.functions.invokeHttpFunction",
				"title": "Invoke function via HTTP",
				"category": "Cloud Code",
				"icon": "$(bracket)"
			},
			{
				"command": "cloudcode.openGceDocs",
				"title": "Open Documentation",
				"category": "Cloud Code",
				"icon": "$(question)"
			},
			{
				"command": "cloudcode.functions.openDocs",
				"title": "Open Documentation",
				"category": "Cloud Code",
				"icon": "$(question)"
			},
			{
				"command": "cloudcode.openAwsLambdaImporterDocs",
				"title": "Open Documentation",
				"category": "Cloud Code",
				"icon": "$(question)"
			},
			{
				"command": "cloudcode.awsLambdaImporterExplorer.addFunction",
				"title": "Add function",
				"category": "Cloud Code",
				"icon": "$(add)"
			},
			{
				"command": "cloudcode.runKubernetesApp",
				"title": "Run on Kubernetes",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.debugKubernetesApp",
				"title": "Debug on Kubernetes",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.runCloudRunApp",
				"title": "Run on Cloud Run Emulator",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.debugCloudRunApp",
				"title": "Debug on Cloud Run Emulator",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.deployCloudRunApp",
				"title": "Deploy to Cloud Run",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.welcome",
				"title": "Welcome",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.changeLogs",
				"title": "Change Logs",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.openApiDetail",
				"title": "Open API Detail Page",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.openCloudShellReadme",
				"title": "Welcome to Remote Development",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.statusbarCommand",
				"title": "Open Cloud Code Status Bar Menu",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.mountSecretVolume",
				"title": "Mount Secret as Volume",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.addSecretEnvironmentVariable",
				"title": "Add Secret as Environment Variable",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.secrets.openDocs",
				"title": "Open Documentation",
				"category": "Cloud Code",
				"icon": "$(question)"
			},
			{
				"command": "cloudcode.secrets.viewVersionValue",
				"title": "Show Version Value",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.secrets.enableVersion",
				"title": "Enable Version",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.secrets.disableVersion",
				"title": "Disable Version",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.secrets.destroyVersion",
				"title": "Destroy Version",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.secrets.createVersion",
				"title": "Create Secret Version",
				"category": "Cloud Code",
				"icon": "$(add)"
			},
			{
				"command": "cloudcode.secrets.createVersionWithText",
				"title": "Add Version to Secret in Secret Manager...",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.secrets.create",
				"title": "Create Secret",
				"category": "Cloud Code",
				"icon": "$(add)"
			},
			{
				"command": "cloudcode.secrets.createWithText",
				"title": "Create Secret in Secret Manager...",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.secrets.openCloudConsole",
				"title": "Open in Cloud Console",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.secrets.editPermissions",
				"title": "Edit Permissions in Cloud Console",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.secrets.search",
				"title": "Search for Secret",
				"category": "Cloud Code",
				"icon": "$(search)"
			},
			{
				"command": "cloudcode.secrets.createLabel",
				"title": "Create Label",
				"category": "Cloud Code",
				"icon": "$(add)"
			},
			{
				"command": "cloudcode.secrets.editLabel",
				"title": "Edit Label",
				"category": "Cloud Code",
				"icon": "$(edit)"
			},
			{
				"command": "cloudcode.secrets.copyResourceId",
				"title": "Copy Resource ID",
				"category": "Cloud Code",
				"icon": "$(clippy)"
			},
			{
				"command": "cloudcode.secrets.showCodingInstructions",
				"title": "Show Coding Instructions",
				"category": "Cloud Code",
				"icon": "$(code)"
			},
			{
				"command": "cloudcode.openLogsViewer",
				"title": "View Logs",
				"category": "Cloud Code",
				"icon": {
					"light": "images/light/logging.svg",
					"dark": "images/dark/logging.svg"
				}
			},
			{
				"command": "cloudcode.reportIssue",
				"title": "Report a Bug",
				"category": "Cloud Code",
				"icon": "$(report)"
			},
			{
				"command": "cloudcode.cloudSdkTroubleshooting",
				"title": "Troubleshoot Problems with Cloud SDK",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.viewKubectlYaml",
				"title": "View YAML",
				"category": "Cloud Code",
				"icon": "$(file-symlink-file)"
			},
			{
				"command": "cloudcode.editKubectlYaml",
				"title": "Edit YAML",
				"category": "Cloud Code",
				"icon": "$(edit)"
			},
			{
				"command": "cloudcode.viewKubectlDeploymentLog",
				"title": "View KubectlDeploymentLog",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.scaleDeployment",
				"title": "Scale Deployment",
				"icon": "$(edit)"
			},
			{
				"command": "cloudcode.openUrl",
				"title": "Open URL",
				"category": "Cloud Code",
				"icon": "$(link-external)"
			},
			{
				"command": "cloudcode.gke.runGcloudInit",
				"title": "Initialize Google Cloud SDK",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.gke.gcloudSignout",
				"title": "Sign Out of All Accounts in Google Cloud SDK",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.gke.gcloudSignoutContext",
				"title": "Sign Out of Google Cloud SDK",
				"category": "Cloud Code",
				"icon": "$(sign-out)"
			},
			{
				"command": "cloudcode.copyValue",
				"title": "Copy Value",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.sourceprotect.copyTracePath",
				"title": "Copy Trace Path",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.sourceprotect.policy.open",
				"title": "Edit Policy File",
				"category": "Cloud Code",
				"icon": "$(pencil)"
			},
			{
				"command": "cloudcode.sourceprotect.policy.openDocumentation",
				"title": "Learn how to create a policy file",
				"category": "Cloud Code",
				"icon": "$(remote-explorer-documentation)"
			},
			{
				"command": "cloudcode.sourceprotect.explorer.dependency.open",
				"title": "Open file",
				"category": "Cloud Code",
				"icon": "$(go-to-file)"
			},
			{
				"command": "cloudcode.sourceprotect.explorer.upgradeToLatestCompatibleVersion",
				"title": "Upgrade to latest compatible version",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.sourceprotect.explorer.upgradeToMinimalCompliantVersion",
				"title": "Upgrade to minimal compliant version",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.sourceprotect.explorer.upgradeToVersion",
				"title": "Upgrade to this version",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.sourceprotect.visit.private.preview.request",
				"title": "Join the private preview",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.shell.openRecent",
				"title": "Open in Cloud Shell...",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.exportCoverage",
				"title": "INTERNAL: Export Code Coverage",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.addClusterToConfig",
				"title": "Add a Cluster to the KubeConfig",
				"category": "Cloud Code",
				"icon": "$(add)"
			},
			{
				"command": "cloudcode.softwareLicensesPrivacyPolicy",
				"title": "Show Software Licenses and Privacy",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.kubernetes.localDevExplorer.openSkaffoldLogChannel",
				"title": "Open Skaffold Log",
				"category": "Cloud Code",
				"icon": {
					"light": "images/light/logging.svg",
					"dark": "images/dark/logging.svg"
				}
			},
			{
				"command": "cloudcode.kubernetes.localDevExplorer.openLaunchConfig",
				"title": "Open Launch Config",
				"category": "Cloud Code",
				"icon": "$(gear)"
			},
			{
				"command": "cloudcode.skaffold.pipeline.trigger",
				"title": "Rebuild and redeploy the application",
				"category": "Cloud Code",
				"icon": "$(refresh)"
			},
			{
				"command": "cloudcode.kubernetes.localDevExplorer.openUrl",
				"title": "Open URL",
				"category": "Cloud Code",
				"icon": "$(link-external)"
			},
			{
				"command": "cloudcode.takeSurvey",
				"title": "Take Survey",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.openSkaffoldEventsV2Log",
				"title": "Open Skaffold Events V2 Logs",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.kubernetes.localDevExplorer.focusView",
				"title": "Focus on Development Sessions Explorer",
				"category": "Cloud Code"
			},
			{
				"command": "apigee.workspace.create",
				"title": "Create Apigee workspace",
				"category": "Cloud Code",
				"icon": "$(search-new-editor)"
			},
			{
				"command": "apigee.api.filter.clear",
				"title": "Clear API Filter",
				"category": "Cloud Code",
				"icon": "$(clear-all)"
			},
			{
				"command": "apigee.api.filter",
				"title": "Filter APIs",
				"category": "Cloud Code",
				"icon": "$(search)"
			},
			{
				"command": "apigee.workspace.edit",
				"title": "Edit workspace",
				"category": "Cloud Code",
				"icon": "$(edit)"
			},
			{
				"command": "apigee.trace.open",
				"title": "Open Apigee trace",
				"category": "Cloud Code"
			},
			{
				"command": "apigee.tests.createTestBundle",
				"title": "Create Apigee test bundle",
				"category": "Cloud Code",
				"icon": "$(add)"
			},
			{
				"command": "apigee.emulator.setup",
				"title": "Setup Apigee Emulator",
				"category": "Cloud Code",
				"icon": "$(cloud-download)"
			},
			{
				"command": "apigee.emulator.update",
				"title": "Update Apigee Emulator",
				"category": "Cloud Code",
				"icon": "$(sync)"
			},
			{
				"command": "apigee.emulator.copyurl",
				"title": "Copy URL",
				"category": "Cloud Code",
				"icon": "$(chrome-restore)"
			},
			{
				"command": "apigee.trace.start",
				"title": "Start tracing",
				"category": "Cloud Code",
				"icon": "$(watch-view-icon)"
			},
			{
				"command": "apigee.container.start",
				"title": "Start Container",
				"category": "Cloud Code",
				"icon": {
					"light": "images/light/Play.svg",
					"dark": "images/dark/Play.svg"
				}
			},
			{
				"command": "apigee.container.stop",
				"title": "Stop container",
				"category": "Cloud Code",
				"icon": {
					"light": "images/light/Stop.svg",
					"dark": "images/dark/Stop.svg"
				}
			},
			{
				"command": "apigee.container.reset",
				"title": "Reset container",
				"category": "Cloud Code",
				"icon": {
					"light": "images/light/Clear-Layers.svg",
					"dark": "images/dark/Clear-Layers.svg"
				}
			},
			{
				"command": "apigee.container.add",
				"title": "Add container",
				"category": "Cloud Code",
				"icon": {
					"light": "images/light/Add.svg",
					"dark": "images/dark/Add.svg"
				}
			},
			{
				"command": "apigee.container.delete",
				"title": "Delete container",
				"category": "Cloud Code",
				"icon": "$(trash)"
			},
			{
				"command": "apigee.workspace.open",
				"title": "Open Apigee workspace",
				"category": "Cloud Code",
				"icon": "$(explorer-view-icon)"
			},
			{
				"command": "apigee.environments.create",
				"title": "Create Apigee environment",
				"category": "Cloud Code",
				"icon": {
					"light": "images/light/Add.svg",
					"dark": "images/dark/Add.svg"
				}
			},
			{
				"command": "apigee.environments.create.targetserver",
				"title": "Create target server",
				"icon": {
					"light": "images/light/Add.svg",
					"dark": "images/dark/Add.svg"
				}
			},
			{
				"command": "apigee.environments.create.deployments",
				"title": "Manage deployments",
				"icon": {
					"light": "images/light/Settings.svg",
					"dark": "images/dark/Settings.svg"
				}
			},
			{
				"command": "apigee.environments.create.flowhooks",
				"title": "Manage flow hooks",
				"icon": {
					"light": "images/light/Settings.svg",
					"dark": "images/dark/Settings.svg"
				}
			},
			{
				"command": "apigee.proxies.createProxyBundle",
				"title": "Create Apigee proxy bundle",
				"category": "Cloud Code",
				"icon": {
					"light": "images/light/Add.svg",
					"dark": "images/dark/Add.svg"
				}
			},
			{
				"command": "apigee.proxies.importProxyBundle",
				"title": "Import Apigee proxy bundle",
				"category": "Cloud Code",
				"icon": {
					"light": "images/light/Upload.svg",
					"dark": "images/dark/Upload.svg"
				}
			},
			{
				"command": "apigee.proxies.createSharedFlowBundle",
				"title": "Create Apigee shared flow bundle",
				"category": "Cloud Code",
				"icon": {
					"light": "images/light/Add.svg",
					"dark": "images/dark/Add.svg"
				}
			},
			{
				"command": "apigee.proxies.importSharedFlowBundle",
				"title": "Import Apigee shared flow bundle",
				"category": "Cloud Code",
				"icon": {
					"light": "images/light/Upload.svg",
					"dark": "images/dark/Upload.svg"
				}
			},
			{
				"command": "apigee.proxies.createProxyEndpoint",
				"title": "Create proxy endpoint",
				"icon": {
					"light": "images/light/Add.svg",
					"dark": "images/dark/Add.svg"
				}
			},
			{
				"command": "apigee.proxies.createTargetEndpoint",
				"title": "Create target endpoint",
				"icon": {
					"light": "images/light/Add.svg",
					"dark": "images/dark/Add.svg"
				}
			},
			{
				"command": "apigee.proxies.createPolicy",
				"title": "Create policy",
				"icon": {
					"light": "images/light/Add.svg",
					"dark": "images/dark/Add.svg"
				}
			},
			{
				"command": "apigee.proxies.createSharedFlow",
				"title": "Create shared flow",
				"icon": {
					"light": "images/light/Add.svg",
					"dark": "images/dark/Add.svg"
				}
			},
			{
				"command": "apigee.resource.create",
				"title": "Create resource",
				"icon": {
					"light": "images/light/Add.svg",
					"dark": "images/dark/Add.svg"
				}
			},
			{
				"command": "apigee.resource.import",
				"title": "Import resource",
				"icon": {
					"light": "images/light/Upload.svg",
					"dark": "images/dark/Upload.svg"
				}
			},
			{
				"command": "apigee.tests.createDeveloper",
				"title": "Create developer",
				"icon": {
					"light": "images/light/Add.svg",
					"dark": "images/dark/Add.svg"
				}
			},
			{
				"command": "apigee.tests.createProduct",
				"title": "Create API product",
				"icon": {
					"light": "images/light/Add.svg",
					"dark": "images/dark/Add.svg"
				}
			},
			{
				"command": "apigee.tests.createApp",
				"title": "Create developer app",
				"icon": {
					"light": "images/light/Add.svg",
					"dark": "images/dark/Add.svg"
				}
			},
			{
				"command": "apigee.tests.createMap",
				"title": "Create key value map",
				"icon": {
					"light": "images/light/Add.svg",
					"dark": "images/dark/Add.svg"
				}
			},
			{
				"command": "apigee.environments.deploy",
				"title": "Deploy to Apigee Emulator",
				"icon": {
					"light": "images/light/Deploy.svg",
					"dark": "images/dark/Deploy.svg"
				},
				"when": "dockerInstalled"
			},
			{
				"command": "apigee.tests.setupTest",
				"title": "Export test resources to Apigee Emulator",
				"icon": {
					"light": "images/light/Export-Test.svg",
					"dark": "images/dark/Export-Test.svg"
				},
				"when": "dockerInstalled"
			},
			{
				"command": "apigee.delete",
				"title": "Delete"
			},
			{
				"command": "apigee.clone",
				"title": "Copy"
			},
			{
				"command": "apigee.rename",
				"title": "Rename"
			},
			{
				"command": "apigee.emulator.setuptest",
				"title": "Set up test resources in Apigee Emulator"
			},
			{
				"command": "apigee.explorer.refresh",
				"title": "Refresh Apigee Explorer view",
				"category": "Cloud Code",
				"icon": "$(refresh)"
			},
			{
				"command": "apigee.proxies.createSharedFlowBundleMultiple",
				"title": "Add shared flow element",
				"icon": {
					"light": "images/light/Add.svg",
					"dark": "images/dark/Add.svg"
				}
			},
			{
				"command": "apigee.proxies.createProxyMultiple",
				"title": "Add proxy element",
				"icon": {
					"light": "images/light/Add.svg",
					"dark": "images/dark/Add.svg"
				}
			},
			{
				"command": "apigee.environments.createMultiple",
				"title": "Add resource",
				"icon": {
					"light": "images/light/Add.svg",
					"dark": "images/dark/Add.svg"
				}
			},
			{
				"command": "apigee.tests.multiple",
				"title": "Add resource",
				"icon": {
					"light": "images/light/Add.svg",
					"dark": "images/dark/Add.svg"
				}
			},
			{
				"command": "apigee.design.api",
				"title": "Design API spec",
				"category": "Cloud Code",
				"icon": {
					"light": "images/light/pen_spark.svg",
					"dark": "images/dark/pen_spark.svg"
				}
			},
			{
				"command": "cloudcode.minikubeControl",
				"title": "Control minikube",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.viewFile",
				"title": "View file in Read-Only",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.migrateToContainers.mfit.createSource",
				"title": "Create source",
				"category": "Cloud Code",
				"icon": "$(add)"
			},
			{
				"command": "cloudcode.migrateToContainers.mfit.editSources",
				"title": "Edit sources",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.migrateToContainers.mfit.syncSources",
				"title": "Reload sources",
				"category": "Cloud Code",
				"icon": "$(sync)"
			},
			{
				"command": "cloudcode.migrateToContainers.mfit.sourceShowReport",
				"title": "Show report",
				"icon": "$(arrow-right)",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.migrateToContainers.mfit.sourceMigrate",
				"title": "Migrate",
				"icon": "$(debug-step-over)",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.migrateToContainers.installTools",
				"title": "Install or update Migrate tools",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.migrateToContainers.editToolsPaths",
				"title": "Edit tools paths",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.duetAI.generateCode",
				"category": "Cloud Code",
				"title": "Generate Code",
				"icon": {
					"light": "images/light/pen_spark.svg",
					"dark": "images/dark/pen_spark.svg"
				}
			},
			{
				"command": "cloudcode.duetAI.actionsMenu",
				"category": "Cloud Code",
				"title": "Generate Code",
				"icon": {
					"light": "images/light/spark.svg",
					"dark": "images/dark/spark.svg"
				}
			},
			{
				"command": "cloudcode.duetAI.resetChat",
				"category": "Cloud Code Duet AI",
				"title": "Reset Chat",
				"icon": "$(trash)"
			},
			{
				"command": "cloudcode.duetAI.chatExplain",
				"category": "Cloud Code Duet AI",
				"title": "Explain this",
				"icon": "images/chat_spark.svg"
			},
			{
				"command": "cloudcode.duetAI.chatGenerateTests",
				"category": "Cloud Code Duet AI",
				"title": "Generate unit tests",
				"icon": "images/chat_spark.svg"
			}
		],
		"keybindings": [
			{
				"command": "cloudcode.duetAI.generateCode",
				"key": "ctrl+enter",
				"when": "config.cloudcode.duetAI.enable && editorTextFocus && authLoggedIn"
			}
		],
		"icons": {
			"duet-logo": {
				"description": "Duet AI Logo",
				"default": {
					"fontPath": "fonts/icons.woff",
					"fontCharacter": "\\E900"
				}
			},
			"duet-logo-slash": {
				"description": "Duet AI Logo (Disabled)",
				"default": {
					"fontPath": "fonts/icons.woff",
					"fontCharacter": "\\E904"
				}
			},
			"duet-logo-thin": {
				"description": "Duet AI Logo (thin lines)",
				"default": {
					"fontPath": "fonts/icons.woff",
					"fontCharacter": "\\E903"
				}
			},
			"duet-logo-thin-slash": {
				"description": "Duet AI Logo (Disabled, thin lines)",
				"default": {
					"fontPath": "fonts/icons.woff",
					"fontCharacter": "\\E905"
				}
			},
			"pen-spark": {
				"description": "Pen with spark",
				"default": {
					"fontPath": "fonts/icons.woff",
					"fontCharacter": "\\E902"
				}
			},
			"pen-spark-slash": {
				"description": "Pen with spark (Disabled)",
				"default": {
					"fontPath": "fonts/icons.woff",
					"fontCharacter": "\\E901"
				}
			}
		},
		"menus": {
			"commandPalette": [
				{
					"command": "cloudcode.gcloudInstallGuide",
					"when": "!runningOnCloudShell"
				},
				{
					"command": "cloudcode.removeKubeConfig",
					"when": "false"
				},
				{
					"command": "cloudcode.kubernetes.openClusterInProviderPortal",
					"when": "false"
				},
				{
					"command": "cloudcode.toggleApiExplorerCategories",
					"when": "false"
				},
				{
					"command": "cloudcode.copyResourceValue",
					"when": "false"
				},
				{
					"command": "cloudcode.searchApi",
					"when": "false"
				},
				{
					"command": "cloudcode.statusbar.searchApi",
					"when": "false"
				},
				{
					"command": "cloudcode.openApiDetail",
					"when": "false"
				},
				{
					"command": "cloudcode.sharedExplorer.chooseProject",
					"when": "false"
				},
				{
					"command": "cloudcode.copyLeafValue",
					"when": "false"
				},
				{
					"command": "cloudcode.applyTriggerYaml",
					"when": "false"
				},
				{
					"command": "cloudcode.cloudRunOpenDocs",
					"when": "false"
				},
				{
					"command": "cloudcode.cloudRunDeployRevision",
					"when": "false"
				},
				{
					"command": "cloudcode.cloudRunDeployService",
					"when": "false"
				},
				{
					"command": "cloudcode.cloudRunOpenInConsole",
					"when": "false"
				},
				{
					"command": "cloudcode.cloudRunOpenEndpoint",
					"when": "false"
				},
				{
					"command": "cloudcode.cloudRunOpenContainerImage",
					"when": "false"
				},
				{
					"command": "cloudcode.openGceDocs",
					"when": "false"
				},
				{
					"command": "cloudcode.functions.openDocs",
					"when": "false"
				},
				{
					"command": "cloudcode.openAwsLambdaImporterDocs",
					"when": "false"
				},
				{
					"command": "cloudcode.viewKubectlYaml",
					"when": "false || runningTest"
				},
				{
					"command": "cloudcode.editKubectlYaml",
					"when": "false || runningTest"
				},
				{
					"command": "cloudcode.viewKubectlDeploymentLog",
					"when": "false || runningTest"
				},
				{
					"command": "cloudcode.scaleDeployment",
					"when": "false"
				},
				{
					"command": "cloudcode.openKubectlAddress",
					"when": "false"
				},
				{
					"command": "cloudcode.mountSecretVolume",
					"when": "false"
				},
				{
					"command": "cloudcode.changeLogs",
					"when": "false"
				},
				{
					"command": "cloudcode.addSecretEnvironmentVariable",
					"when": "false"
				},
				{
					"command": "cloudcode.secrets.openDocs",
					"when": "false"
				},
				{
					"command": "cloudcode.secrets.viewVersionValue",
					"when": "false"
				},
				{
					"command": "cloudcode.secrets.enableVersion",
					"when": "false"
				},
				{
					"command": "cloudcode.secrets.disableVersion",
					"when": "false"
				},
				{
					"command": "cloudcode.secrets.destroyVersion",
					"when": "false"
				},
				{
					"command": "cloudcode.secrets.openCloudConsole",
					"when": "false"
				},
				{
					"command": "cloudcode.secrets.editPermissions",
					"when": "false"
				},
				{
					"command": "cloudcode.secrets.createVersionWithText",
					"when": "false"
				},
				{
					"command": "cloudcode.secrets.createWithText",
					"when": "false"
				},
				{
					"command": "cloudcode.secrets.createLabel",
					"when": "false"
				},
				{
					"command": "cloudcode.secrets.editLabel",
					"when": "false"
				},
				{
					"command": "cloudcode.secrets.copyResourceId",
					"when": "false"
				},
				{
					"command": "cloudcode.secrets.showCodingInstructions",
					"when": "false"
				},
				{
					"command": "cloudcode.openUrl",
					"when": "false"
				},
				{
					"command": "cloudcode.openKubeconfig",
					"when": "false"
				},
				{
					"command": "cloudcode.gke.runGcloudInit",
					"when": "false"
				},
				{
					"command": "cloudcode.gke.gcloudSignout",
					"when": "!runningOnCloudShell"
				},
				{
					"command": "cloudcode.gke.gcloudSignoutContext",
					"when": "false"
				},
				{
					"command": "cloudcode.copyValue",
					"when": "false"
				},
				{
					"command": "cloudcode.exportCoverage",
					"when": "cloudcode.exportCoverageVisible"
				},
				{
					"command": "cloudcode.shell.openRecent",
					"when": "!runningOnCloudShell"
				},
				{
					"command": "cloudcode.refreshCloudRunExplorer",
					"when": "false"
				},
				{
					"command": "cloudcode.createCloudRunAppExplorerTitle",
					"when": "false"
				},
				{
					"command": "cloudcode.runCloudRunAppExplorerTitle",
					"when": "false"
				},
				{
					"command": "cloudcode.debugCloudRunAppExplorerTitle",
					"when": "false"
				},
				{
					"command": "cloudcode.refreshSecretsExplorer",
					"when": "false"
				},
				{
					"command": "cloudcode.refreshGceExplorer",
					"when": "false"
				},
				{
					"command": "cloudcode.refreshGcfExplorer",
					"when": "false"
				},
				{
					"command": "cloudcode.functions.openConfig",
					"when": "false"
				},
				{
					"command": "cloudcode.functions.annotateWorkspace",
					"when": "true"
				},
				{
					"command": "cloudcode.refreshAwsLambdaImporterExplorer",
					"when": "false"
				},
				{
					"command": "cloudcode.functions.create",
					"when": "false"
				},
				{
					"command": "cloudcode.functions.downloadSourceCode",
					"when": "false"
				},
				{
					"command": "cloudcode.functions.invokeHttpFunction",
					"when": "false"
				},
				{
					"command": "cloudcode.functions.deploy",
					"when": "false"
				},
				{
					"command": "cloudcode.functions.deployFunction",
					"when": "false"
				},
				{
					"command": "cloudcode.functions.showLocalFiles",
					"when": "false"
				},
				{
					"command": "cloudcode.awsLambdaImporterExplorer.addFunction",
					"when": "false"
				},
				{
					"command": "cloudcode.refreshKubectlCollection",
					"when": "false"
				},
				{
					"command": "cloudcode.openKubeDocs",
					"when": "false"
				},
				{
					"command": "cloudcode.refreshKubectlExplorer",
					"when": "false"
				},
				{
					"command": "cloudcode.createK8sAppExplorerTitle",
					"when": "false"
				},
				{
					"command": "cloudcode.runK8sAppExplorerTitle",
					"when": "false"
				},
				{
					"command": "cloudcode.debugK8sAppExplorerTitle",
					"when": "false"
				},
				{
					"command": "cloudcode.deleteKubectlCluster",
					"when": "false"
				},
				{
					"command": "cloudcode.deleteKubectlContext",
					"when": "false"
				},
				{
					"command": "cloudcode.setKubectlCluster",
					"when": "false"
				},
				{
					"command": "cloudcode.setKubectlContext",
					"when": "false"
				},
				{
					"command": "cloudcode.setKubectlNamespace",
					"when": "false"
				},
				{
					"command": "cloudcode.reportIssue",
					"when": "!runningInCloudShellEditor"
				},
				{
					"command": "cloudcode.openCloudShellReadme",
					"when": "runningOnCloudShell && !runningInCloudShellEditor"
				},
				{
					"command": "cloudcode.getKubectlContainerTerminal",
					"when": "false || runningTest"
				},
				{
					"command": "cloudcode.deleteKubectlResource",
					"when": "false || runningTest"
				},
				{
					"command": "cloudcode.describeKubectlResource",
					"when": "false || runningTest"
				},
				{
					"command": "cloudcode.kubernetes.localDevExplorer.openSkaffoldLogChannel",
					"when": "false"
				},
				{
					"command": "cloudcode.kubernetes.localDevExplorer.openLaunchConfig",
					"when": "false"
				},
				{
					"command": "cloudcode.skaffold.pipeline.trigger",
					"when": "false"
				},
				{
					"command": "cloudcode.kubernetes.localDevExplorer.openUrl",
					"when": "false"
				},
				{
					"command": "cloudcode.compute.ui.vm.open.in.console",
					"when": "false"
				},
				{
					"command": "cloudcode.compute.ui.vm.firewall.open.in.console",
					"when": "false"
				},
				{
					"command": "cloudcode.compute.ui.vm.disk.open.in.console",
					"when": "false"
				},
				{
					"command": "cloudcode.gce.sshVmInstance",
					"when": "false"
				},
				{
					"command": "cloudcode.gce.scpVmInstance",
					"when": "false"
				},
				{
					"command": "cloudcode.functions.openInConsole",
					"when": "false"
				},
				{
					"command": "cloudcode.functions.editInConsole",
					"when": "false"
				},
				{
					"command": "apigee.emulator.setup",
					"when": "false"
				},
				{
					"command": "apigee.emulator.update",
					"when": "false"
				},
				{
					"command": "apigee.emulator.copyurl",
					"when": "false"
				},
				{
					"command": "apigee.trace.open",
					"when": "validApigeeWorkspace && config.cloudcode.beta.enableApigeeTrace"
				},
				{
					"command": "apigee.trace.start",
					"when": "false"
				},
				{
					"command": "apigee.container.add",
					"when": "false"
				},
				{
					"command": "apigee.container.delete",
					"when": "false"
				},
				{
					"command": "apigee.container.start",
					"when": "false"
				},
				{
					"command": "apigee.container.stop",
					"when": "false"
				},
				{
					"command": "apigee.container.reset",
					"when": "false"
				},
				{
					"command": "apigee.explorer.refresh",
					"when": "validApigeeWorkspace"
				},
				{
					"command": "apigee.delete",
					"when": "false"
				},
				{
					"command": "apigee.clone",
					"when": "false"
				},
				{
					"command": "apigee.rename",
					"when": "false"
				},
				{
					"command": "apigee.environments.create",
					"when": "validApigeeWorkspace"
				},
				{
					"command": "apigee.environments.create.targetserver",
					"when": "false"
				},
				{
					"command": "apigee.environments.create.deployments",
					"when": "false"
				},
				{
					"command": "apigee.environments.create.flowhooks",
					"when": "false"
				},
				{
					"command": "apigee.resource.create",
					"when": "false"
				},
				{
					"command": "apigee.resource.import",
					"when": "false"
				},
				{
					"command": "apigee.environments.deploy",
					"when": "false"
				},
				{
					"command": "apigee.emulator.setuptest",
					"when": "false"
				},
				{
					"command": "apigee.proxies.createProxyBundle",
					"when": "validApigeeWorkspace"
				},
				{
					"command": "apigee.proxies.importProxyBundle",
					"when": "validApigeeWorkspace"
				},
				{
					"command": "apigee.proxies.createSharedFlowBundle",
					"when": "validApigeeWorkspace"
				},
				{
					"command": "apigee.proxies.importSharedFlowBundle",
					"when": "validApigeeWorkspace"
				},
				{
					"command": "apigee.proxies.createProxyEndpoint",
					"when": "false"
				},
				{
					"command": "apigee.proxies.createTargetEndpoint",
					"when": "false"
				},
				{
					"command": "apigee.proxies.createPolicy",
					"when": "false"
				},
				{
					"command": "apigee.proxies.createSharedFlow",
					"when": "false"
				},
				{
					"command": "apigee.tests.setupTest",
					"when": "false"
				},
				{
					"command": "apigee.tests.createTestBundle",
					"when": "validApigeeWorkspace"
				},
				{
					"command": "apigee.tests.createDeveloper",
					"when": "false"
				},
				{
					"command": "apigee.tests.createProduct",
					"when": "false"
				},
				{
					"command": "apigee.tests.createApp",
					"when": "false"
				},
				{
					"command": "apigee.tests.createMap",
					"when": "false"
				},
				{
					"command": "apigee.proxies.createSharedFlowBundleMultiple",
					"when": "false"
				},
				{
					"command": "apigee.proxies.createProxyMultiple",
					"when": "false"
				},
				{
					"command": "apigee.environments.createMultiple",
					"when": "false"
				},
				{
					"command": "apigee.tests.multiple",
					"when": "false"
				},
				{
					"command": "cloudcode.viewFile",
					"when": "false"
				},
				{
					"command": "cloudcode.sourceprotect.policy.open",
					"when": "false"
				},
				{
					"command": "cloudcode.sourceprotect.policy.openDocumentation",
					"when": "false"
				},
				{
					"command": "cloudcode.sourceprotect.explorer.dependency.open",
					"when": "false"
				},
				{
					"command": "cloudcode.sourceprotect.explorer.upgradeToLatestCompatibleVersion",
					"when": "false"
				},
				{
					"command": "cloudcode.sourceprotect.explorer.upgradeToMinimalCompliantVersion",
					"when": "false"
				},
				{
					"command": "cloudcode.sourceprotect.explorer.upgradeToVersion",
					"when": "false"
				},
				{
					"command": "cloudcode.sourceprotect.visit.private.preview.request",
					"when": "false"
				},
				{
					"command": "cloudcode.migrateToContainers.mfit.createSource",
					"when": "false"
				},
				{
					"command": "cloudcode.migrateToContainers.mfit.editSources",
					"when": "config.cloudcode.beta.enableMigrateToContainers"
				},
				{
					"command": "cloudcode.migrateToContainers.mfit.syncSources",
					"when": "false"
				},
				{
					"command": "cloudcode.migrateToContainers.installTools",
					"when": "config.cloudcode.beta.enableMigrateToContainers"
				},
				{
					"command": "cloudcode.migrateToContainers.editToolsPaths",
					"when": "false"
				},
				{
					"command": "cloudcode.migrateToContainers.mfit.sourceMigrate",
					"when": "false"
				},
				{
					"command": "cloudcode.duetAI.actionsMenu",
					"when": "config.cloudcode.duetAI.enable && authLoggedIn"
				},
				{
					"command": "cloudcode.duetAI.generateCode",
					"when": "config.cloudcode.duetAI.enable && authLoggedIn"
				},
				{
					"command": "cloudcode.duetAI.resetChat",
					"when": "config.cloudcode.duetAI.enable && config.cloudcode.duetAI.enableChat && authLoggedIn"
				},
				{
					"command": "cloudcode.duetAI.chatExplain",
					"when": "config.cloudcode.duetAI.enable && config.cloudcode.duetAI.enableChat && authLoggedIn"
				},
				{
					"command": "cloudcode.duetAI.chatGenerateTests",
					"when": "config.cloudcode.duetAI.enable && config.cloudcode.duetAI.enableChat && authLoggedIn"
				},
				{
					"command": "apigee.design.api",
					"when": "config.cloudcode.duetAI.apigee.enable"
				}
			],
			"editor/title": [
				{
					"command": "cloudcode.duetAI.actionsMenu",
					"group": "navigation",
					"when": "config.cloudcode.duetAI.enable && cloudcode.duetAI.documentMatch && editorTextFocus && authLoggedIn"
				}
			],
			"view/title": [
				{
					"command": "cloudcode.addClusterToConfig",
					"when": "view == cloudcode.unified.kubectlExplorer",
					"group": "navigation@1"
				},
				{
					"command": "cloudcode.createK8sAppExplorerTitle",
					"when": "view == cloudcode.unified.kubernetes.localDevExplorer",
					"group": "navigation@1"
				},
				{
					"command": "cloudcode.runK8sAppExplorerTitle",
					"when": "view == cloudcode.unified.kubernetes.localDevExplorer",
					"group": "navigation@2"
				},
				{
					"command": "cloudcode.debugK8sAppExplorerTitle",
					"when": "view == cloudcode.unified.kubernetes.localDevExplorer",
					"group": "navigation@3"
				},
				{
					"command": "cloudcode.refreshKubectlExplorer",
					"when": "view == cloudcode.unified.kubectlExplorer",
					"group": "navigation@5"
				},
				{
					"command": "cloudcode.openKubeDocs",
					"when": "view == cloudcode.unified.kubectlExplorer",
					"group": "navigation@6"
				},
				{
					"command": "cloudcode.reportIssue",
					"when": "view == cloudcode.unified.kubectlExplorer && !runningInCloudShellEditor"
				},
				{
					"command": "cloudcode.refreshSecretsExplorer",
					"when": "view == cloudcode.unified.secretsExplorer",
					"group": "navigation@3"
				},
				{
					"command": "cloudcode.refreshGceExplorer",
					"when": "view == cloudcode.unified.gceExplorer",
					"group": "navigation@1"
				},
				{
					"command": "cloudcode.refreshGcfExplorer",
					"when": "view == cloudcode.unified.gcfExplorer",
					"group": "navigation@1"
				},
				{
					"command": "cloudcode.refreshAwsLambdaImporterExplorer",
					"when": "view == cloudcode.unified.awsLambdaImporterExplorer",
					"group": "navigation@1"
				},
				{
					"command": "cloudcode.functions.create",
					"when": "view == cloudcode.unified.gcfExplorer",
					"group": "navigation@1"
				},
				{
					"command": "cloudcode.functions.deploy",
					"when": "view == cloudcode.unified.gcfExplorer",
					"group": "navigation@1"
				},
				{
					"command": "cloudcode.createCloudRunAppExplorerTitle",
					"when": "view == cloudcode.unified.cloudRunExplorer",
					"group": "navigation@1"
				},
				{
					"command": "cloudcode.awsLambdaImporterExplorer.addFunction",
					"when": "view == cloudcode.unified.awsLambdaImporterExplorer",
					"group": "navigation@1"
				},
				{
					"command": "cloudcode.runCloudRunAppExplorerTitle",
					"when": "view == cloudcode.unified.cloudRunExplorer",
					"group": "navigation@2"
				},
				{
					"command": "cloudcode.debugCloudRunAppExplorerTitle",
					"when": "view == cloudcode.unified.cloudRunExplorer",
					"group": "navigation@3"
				},
				{
					"command": "cloudcode.cloudRunDeployService",
					"when": "view == cloudcode.unified.cloudRunExplorer",
					"group": "navigation@4"
				},
				{
					"command": "cloudcode.refreshCloudRunExplorer",
					"when": "view == cloudcode.unified.cloudRunExplorer",
					"group": "navigation@5"
				},
				{
					"command": "cloudcode.cloudRunOpenDocs",
					"when": "view == cloudcode.unified.cloudRunExplorer",
					"group": "navigation@6"
				},
				{
					"command": "cloudcode.openGceDocs",
					"when": "view == cloudcode.unified.gceExplorer",
					"group": "navigation@2"
				},
				{
					"command": "cloudcode.functions.openDocs",
					"when": "view == cloudcode.unified.gcfExplorer",
					"group": "navigation@2"
				},
				{
					"command": "cloudcode.openAwsLambdaImporterDocs",
					"when": "view == cloudcode.unified.awsLambdaImporterExplorer",
					"group": "navigation@2"
				},
				{
					"command": "cloudcode.searchApi",
					"when": "view == cloudcode.unified.apiExplorer",
					"group": "navigation@0"
				},
				{
					"command": "cloudcode.secrets.openDocs",
					"when": "view == cloudcode.unified.secretsExplorer",
					"group": "navigation@4"
				},
				{
					"command": "cloudcode.secrets.create",
					"when": "view == cloudcode.unified.secretsExplorer",
					"group": "navigation@1"
				},
				{
					"command": "cloudcode.secrets.search",
					"when": "view == cloudcode.unified.secretsExplorer",
					"group": "navigation@2"
				},
				{
					"command": "cloudcode.toggleApiExplorerCategories",
					"when": "view == cloudcode.unified.apiExplorer",
					"group": "navigation@1"
				},
				{
					"command": "apigee.explorer.refresh",
					"when": "view == cloudcode.unified.apigee.explorer",
					"group": "navigation"
				},
				{
					"command": "cloudcode.migrateToContainers.mfit.createSource",
					"when": "view == cloudcode.unified.mfitSources",
					"group": "navigation@1"
				},
				{
					"command": "cloudcode.migrateToContainers.mfit.syncSources",
					"when": "view == cloudcode.unified.mfitSources",
					"group": "navigation@2"
				},
				{
					"command": "cloudcode.duetAI.resetChat",
					"group": "navigation",
					"when": "view == cloudcode.duetAI.chatView"
				},
				{
					"command": "apigee.design.api",
					"when": "config.cloudcode.duetAI.apigee.enable && view == cloudcode.unified.apigee.explorer && authProjectId",
					"group": "navigation"
				}
			],
			"explorer/context": [
				{
					"command": "cloudcode.applyTriggerYaml",
					"when": "resourceScheme == file && resourceLangId == yaml && resourceFilename =~ /trigger/ig",
					"group": "6_copypath"
				}
			],
			"editor/context": [
				{
					"command": "cloudcode.secrets.createWithText",
					"when": "editorTextFocus",
					"group": "cloudcode@1"
				},
				{
					"command": "cloudcode.secrets.createVersionWithText",
					"when": "editorTextFocus",
					"group": "cloudcode@1"
				},
				{
					"command": "cloudcode.duetAI.generateCode",
					"when": "config.cloudcode.duetAI.enable && cloudcode.duetAI.documentMatch && editorTextFocus && authLoggedIn",
					"group": "cloudcode@1"
				},
				{
					"command": "cloudcode.duetAI.chatExplain",
					"when": "config.cloudcode.duetAI.enable && config.cloudcode.duetAI.enableChat && cloudcode.duetAI.documentMatch && editorTextFocus && authLoggedIn",
					"group": "cloudcode@1"
				},
				{
					"command": "cloudcode.duetAI.chatGenerateTests",
					"when": "config.cloudcode.duetAI.enable && config.cloudcode.duetAI.enableChat && cloudcode.duetAI.documentMatch && editorTextFocus && authLoggedIn",
					"group": "cloudcode@1"
				}
			],
			"view/item/context": [
				{
					"command": "cloudcode.setKubectlCluster",
					"when": "view == cloudcode.unified.kubectlExplorer && viewItem =~ /cloudcode.setKubectlCluster/",
					"group": "1"
				},
				{
					"command": "cloudcode.cancelKubectlClusterProxy",
					"when": "view == cloudcode.unified.kubectlExplorer && viewItem =~ /cloudcode.cancelKubectlClusterProxy/",
					"group": "3"
				},
				{
					"command": "cloudcode.setupKubectlClusterProxy",
					"when": "view == cloudcode.unified.kubectlExplorer && viewItem =~ /cloudcode.setupKubectlClusterProxy/",
					"group": "3"
				},
				{
					"command": "cloudcode.gke.setupPrivateNodesCloudNat",
					"when": "view == cloudcode.unified.kubectlExplorer && viewItem =~ /cloudcode.gke.setupPrivateNodesCloudNat/",
					"group": "3"
				},
				{
					"command": "cloudcode.setKubectlContext",
					"when": "view == cloudcode.unified.kubectlExplorer && viewItem =~ /cloudcode.setKubectlContext/",
					"group": "1"
				},
				{
					"command": "cloudcode.openKubernetesDashboard",
					"when": "view == cloudcode.unified.kubectlExplorer && viewItem =~ /cloudcode.openKubernetesDashboard/",
					"group": "2"
				},
				{
					"command": "cloudcode.refreshKubectlCollection",
					"when": "(view == cloudcode.unified.kubectlExplorer || view == cloudcode.unified.kubernetes.localDevExplorer) && viewItem =~ /cloudcode.refreshKubectlCollection/",
					"group": "2"
				},
				{
					"command": "cloudcode.setKubectlNamespace",
					"when": "view == cloudcode.unified.kubectlExplorer && viewItem =~ /cloudcode.setKubectlNamespace/",
					"group": "1"
				},
				{
					"command": "cloudcode.copyResourceValue",
					"when": "(view == cloudcode.unified.kubectlExplorer || view == cloudcode.unified.kubernetes.localDevExplorer) && viewItem =~ /cloudcode.copyResourceValue/",
					"group": "8"
				},
				{
					"command": "cloudcode.copyLeafValue",
					"when": "view == cloudcode.unified.kubectlExplorer && viewItem =~ /cloudcode.copyLeafValue/",
					"group": "8"
				},
				{
					"command": "cloudcode.switchKubeConfig",
					"when": "view == cloudcode.unified.kubectlExplorer && viewItem =~ /cloudcode.switchKubeConfig/",
					"group": "inline@1"
				},
				{
					"command": "cloudcode.sharedExplorer.chooseProject",
					"when": "viewItem =~ /cloudcode.sharedExplorer.chooseProject/",
					"group": "inline@1"
				},
				{
					"command": "cloudcode.openKubeconfig",
					"when": "view == cloudcode.unified.kubectlExplorer && viewItem =~ /cloudcode.openKubeconfig/",
					"group": "inline@2"
				},
				{
					"command": "cloudcode.removeKubeConfig",
					"when": "view == cloudcode.unified.kubectlExplorer && viewItem =~ /cloudcode.removeKubeConfig/",
					"group": "2"
				},
				{
					"command": "cloudcode.gke.gcloudSignoutContext",
					"when": "!runningOnCloudShell && viewItem == ProjectObject",
					"group": "inline@2"
				},
				{
					"command": "cloudcode.viewKubectlYaml",
					"when": "(view == cloudcode.unified.kubectlExplorer || view == cloudcode.unified.kubernetes.localDevExplorer) && viewItem =~ /cloudcode.viewKubectlYaml/",
					"group": "inline@1"
				},
				{
					"command": "cloudcode.cloudRunDeployRevision",
					"when": "view == cloudcode.unified.cloudRunExplorer",
					"group": "inline@1"
				},
				{
					"command": "cloudcode.openLogsViewer",
					"when": "view == cloudcode.unified.cloudRunExplorer && viewItem =~ /cloudcode.openLogsViewer/",
					"group": "inline@2"
				},
				{
					"command": "cloudcode.openLogsViewer",
					"when": "view == cloudcode.unified.cloudRunExplorer && viewItem =~ /cloudcode.openLogsViewer/",
					"group": "10"
				},
				{
					"command": "cloudcode.cloudRunOpenContainerImage",
					"when": "view == cloudcode.unified.cloudRunExplorer && viewItem =~ /cloudcode.cloudRunOpenContainerImage/",
					"group": "0"
				},
				{
					"command": "cloudcode.cloudRunDeployService",
					"when": "view == cloudcode.unified.cloudRunExplorer",
					"group": "10"
				},
				{
					"command": "cloudcode.cloudRunOpenInConsole",
					"when": "view == cloudcode.unified.cloudRunExplorer && viewItem =~ /cloudcode.cloudRunOpenInConsole/",
					"group": "0"
				},
				{
					"command": "cloudcode.cloudRunOpenEndpoint",
					"when": "view == cloudcode.unified.cloudRunExplorer && viewItem =~ /cloudcode.cloudRunOpenEndpoint/",
					"group": "0"
				},
				{
					"command": "cloudcode.scaleDeployment",
					"when": "view == cloudcode.unified.kubectlExplorer && viewItem =~ /cloudcode.scaleDeployment/",
					"group": "inline@1"
				},
				{
					"command": "cloudcode.editKubectlYaml",
					"when": "view == cloudcode.unified.kubectlExplorer && viewItem =~ /cloudcode.editKubectlYaml/",
					"group": "inline@1"
				},
				{
					"command": "cloudcode.mountSecretVolume",
					"when": "view == cloudcode.unified.kubectlExplorer && viewItem =~ /cloudcode.mountSecretVolume/",
					"group": "3"
				},
				{
					"command": "cloudcode.addSecretEnvironmentVariable",
					"when": "view == cloudcode.unified.kubectlExplorer && viewItem =~ /cloudcode.addSecretEnvironmentVariable/",
					"group": "3"
				},
				{
					"command": "cloudcode.openKubectlAddress",
					"when": "view == cloudcode.unified.kubectlExplorer && viewItem =~ /cloudcode.openKubectlAddress/",
					"group": "inline@1"
				},
				{
					"command": "cloudcode.describeKubectlResource",
					"when": "(view == cloudcode.unified.kubectlExplorer || view == cloudcode.unified.kubernetes.localDevExplorer) && viewItem =~ /cloudcode.describeKubectlResource/",
					"group": "8"
				},
				{
					"command": "cloudcode.metricsKubectlResource",
					"when": "(view == cloudcode.unified.kubectlExplorer || view == cloudcode.unified.kubernetes.localDevExplorer) && viewItem =~ /cloudcode.metricsKubectlResource/",
					"group": "8"
				},
				{
					"command": "cloudcode.openLogsViewer",
					"when": "(view == cloudcode.unified.kubectlExplorer || cloudcode.unified.kubernetes.localDevExplorer) && viewItem =~ /cloudcode.openLogsViewer/",
					"group": "1"
				},
				{
					"command": "cloudcode.deleteKubectlResource",
					"when": "view == cloudcode.unified.kubectlExplorer && viewItem =~ /cloudcode.deleteKubectlResource/",
					"group": "9"
				},
				{
					"command": "cloudcode.deleteKubectlCluster",
					"when": "view == cloudcode.unified.kubectlExplorer && viewItem =~ /cloudcode.deleteKubectlCluster/",
					"group": "9"
				},
				{
					"command": "cloudcode.kubernetes.openClusterInProviderPortal",
					"when": "view == cloudcode.unified.kubectlExplorer && viewItem =~ /cloudcode.kubernetes.openClusterInProviderPortal/",
					"group": "inline"
				},
				{
					"command": "cloudcode.openUrl",
					"when": "view == cloudcode.unified.kubectlExplorer && viewItem =~ /cloudcode.openUrl/",
					"group": "inline"
				},
				{
					"command": "cloudcode.deleteKubectlContext",
					"when": "view == cloudcode.unified.kubectlExplorer && viewItem =~ /cloudcode.deleteKubectlContext/",
					"group": "9"
				},
				{
					"command": "cloudcode.getKubectlContainerTerminal",
					"when": "(view == cloudcode.unified.kubectlExplorer || view == cloudcode.unified.kubernetes.localDevExplorer) && viewItem =~ /cloudcode.getKubectlContainerTerminal/",
					"group": "2"
				},
				{
					"command": "cloudcode.secrets.copyResourceId",
					"when": "view == cloudcode.unified.secretsExplorer && viewItem =~ /cloudcode.secrets.copyResourceId/",
					"group": "1"
				},
				{
					"command": "cloudcode.secrets.copyResourceId",
					"when": "view == cloudcode.unified.secretsExplorer && viewItem =~ /cloudcode.secrets.copyResourceId/",
					"group": "inline@1"
				},
				{
					"command": "cloudcode.secrets.showCodingInstructions",
					"when": "view == cloudcode.unified.secretsExplorer && viewItem =~ /cloudcode.secrets.showCodingInstructions/",
					"group": "inline@1"
				},
				{
					"command": "cloudcode.secrets.viewVersionValue",
					"when": "view == cloudcode.unified.secretsExplorer && viewItem =~ /cloudcode.secrets.viewVersionValue/",
					"group": "2"
				},
				{
					"command": "cloudcode.secrets.disableVersion",
					"when": "view == cloudcode.unified.secretsExplorer && viewItem =~ /cloudcode.secrets.disableVersion/",
					"group": "2"
				},
				{
					"command": "cloudcode.secrets.enableVersion",
					"when": "view == cloudcode.unified.secretsExplorer && viewItem =~ /cloudcode.secrets.enableVersion/",
					"group": "2"
				},
				{
					"command": "cloudcode.secrets.destroyVersion",
					"when": "view == cloudcode.unified.secretsExplorer && viewItem =~ /cloudcode.secrets.destroyVersion/",
					"group": "2"
				},
				{
					"command": "cloudcode.secrets.createVersion",
					"when": "view == cloudcode.unified.secretsExplorer && viewItem =~ /cloudcode.secrets.createVersion/",
					"group": "inline@1"
				},
				{
					"command": "cloudcode.secrets.openCloudConsole",
					"when": "view == cloudcode.unified.secretsExplorer && viewItem =~ /cloudcode.secrets.openCloudConsole/",
					"group": "2"
				},
				{
					"command": "cloudcode.secrets.editPermissions",
					"when": "view == cloudcode.unified.secretsExplorer && viewItem =~ /cloudcode.secrets.editPermissions/",
					"group": "2"
				},
				{
					"command": "cloudcode.secrets.createVersion",
					"when": "view == cloudcode.unified.secretsExplorer && viewItem =~ /cloudcode.secrets.createVersion/",
					"group": "2"
				},
				{
					"command": "cloudcode.secrets.createLabel",
					"when": "view == cloudcode.unified.secretsExplorer && viewItem =~ /cloudcode.secrets.createLabel/",
					"group": "inline@1"
				},
				{
					"command": "cloudcode.secrets.editLabel",
					"when": "view == cloudcode.unified.secretsExplorer && viewItem =~ /cloudcode.secrets.editLabel/",
					"group": "inline@1"
				},
				{
					"command": "cloudcode.openUrl",
					"when": "view == cloudcode.unified.cloudRunExplorer && viewItem =~ /cloudcode.openUrl/",
					"group": "inline"
				},
				{
					"command": "cloudcode.copyValue",
					"when": "view == cloudcode.unified.cloudRunExplorer && viewItem =~ /cloudcode.copyValue/",
					"group": "10"
				},
				{
					"command": "cloudcode.copyValue",
					"when": "view == cloudcode.unified.gceExplorer && viewItem =~ /cloudcode.copyValue/",
					"group": "1"
				},
				{
					"command": "cloudcode.copyValue",
					"when": "view == cloudcode.unified.kubectlExplorer && viewItem =~ /cloudcode.copyValue/",
					"group": "10"
				},
				{
					"command": "cloudcode.copyValue",
					"when": "view == cloudcode.cloudRunProperties",
					"group": "10"
				},
				{
					"command": "cloudcode.copyValue",
					"when": "view == cloudcode.unified.secretsExplorer && viewItem =~ /cloudcode.copyValue/",
					"group": "10"
				},
				{
					"command": "cloudcode.copyValue",
					"when": "view == cloudcode.unified.sourceProtectExplorer && viewItem =~ /cloudcode.copyValue/",
					"group": "10"
				},
				{
					"command": "cloudcode.sourceprotect.copyTracePath",
					"when": "view == cloudcode.unified.sourceProtectExplorer && viewItem =~ /cloudcode.sourceprotect.copyTracePath/",
					"group": "10"
				},
				{
					"command": "cloudcode.sourceprotect.policy.open",
					"when": "view == cloudcode.unified.sourceProtectExplorer && viewItem =~ /cloudcode.sourceprotect.policy.open/",
					"group": "1"
				},
				{
					"command": "cloudcode.sourceprotect.policy.open",
					"when": "view == cloudcode.unified.sourceProtectExplorer && viewItem =~ /cloudcode.sourceprotect.policy.open/",
					"group": "inline"
				},
				{
					"command": "cloudcode.sourceprotect.policy.openDocumentation",
					"when": "view == cloudcode.unified.sourceProtectExplorer && viewItem =~ /cloudcode.sourceprotect.policy.openDocumentation/",
					"group": "1"
				},
				{
					"command": "cloudcode.sourceprotect.policy.openDocumentation",
					"when": "view == cloudcode.unified.sourceProtectExplorer && viewItem =~ /cloudcode.sourceprotect.policy.openDocumentation/",
					"group": "inline"
				},
				{
					"command": "cloudcode.sourceprotect.explorer.dependency.open",
					"when": "view == cloudcode.unified.sourceProtectExplorer && viewItem =~ /cloudcode.sourceprotect.explorer.dependency.open/",
					"group": "1"
				},
				{
					"command": "cloudcode.sourceprotect.explorer.dependency.open",
					"when": "view == cloudcode.unified.sourceProtectExplorer && viewItem =~ /cloudcode.sourceprotect.explorer.dependency.open/",
					"group": "inline"
				},
				{
					"command": "cloudcode.sourceprotect.explorer.upgradeToLatestCompatibleVersion",
					"when": "view == cloudcode.unified.sourceProtectExplorer && viewItem =~ /cloudcode.sourceprotect.explorer.upgradeToLatestCompatibleVersion/",
					"group": "1"
				},
				{
					"command": "cloudcode.sourceprotect.explorer.upgradeToMinimalCompliantVersion",
					"when": "view == cloudcode.unified.sourceProtectExplorer && viewItem =~ /cloudcode.sourceprotect.explorer.upgradeToMinimalCompliantVersion/",
					"group": "1"
				},
				{
					"command": "cloudcode.sourceprotect.explorer.upgradeToVersion",
					"when": "view == cloudcode.unified.sourceProtectExplorer && viewItem =~ /cloudcode.sourceprotect.explorer.upgradeToVersion/",
					"group": "1"
				},
				{
					"command": "cloudcode.kubernetes.localDevExplorer.openLaunchConfig",
					"when": "view == cloudcode.unified.kubernetes.localDevExplorer && viewItem =~ /cloudcode.kubernetes.localDevExplorer.openLaunchConfig/",
					"group": "inline"
				},
				{
					"command": "cloudcode.skaffold.pipeline.trigger",
					"when": "view == cloudcode.unified.kubernetes.localDevExplorer && viewItem =~ /cloudcode.skaffold.pipeline.trigger/",
					"group": "inline"
				},
				{
					"command": "cloudcode.kubernetes.localDevExplorer.openUrl",
					"when": "view == cloudcode.unified.kubernetes.localDevExplorer && viewItem =~ /cloudcode.kubernetes.localDevExplorer.openUrl/",
					"group": "inline"
				},
				{
					"command": "cloudcode.compute.ui.vm.open.in.console",
					"when": "view == cloudcode.unified.gceExplorer && viewItem =~ /cloudcode.compute.ui.vm.open.in.console/",
					"group": "1"
				},
				{
					"command": "cloudcode.compute.ui.vm.firewall.open.in.console",
					"when": "view == cloudcode.unified.gceExplorer && viewItem =~ /cloudcode.compute.ui.vm.firewall.open.in.console/",
					"group": "1"
				},
				{
					"command": "cloudcode.compute.ui.vm.firewall.open.in.console",
					"when": "view == cloudcode.unified.gceExplorer && viewItem =~ /cloudcode.compute.ui.vm.firewall.open.in.console/",
					"group": "inline"
				},
				{
					"command": "cloudcode.compute.ui.vm.disk.open.in.console",
					"when": "view == cloudcode.unified.gceExplorer && viewItem =~ /cloudcode.compute.ui.vm.disk.open.in.console/",
					"group": "1"
				},
				{
					"command": "cloudcode.compute.ui.vm.disk.open.in.console",
					"when": "view == cloudcode.unified.gceExplorer && viewItem =~ /cloudcode.compute.ui.vm.disk.open.in.console/",
					"group": "inline"
				},
				{
					"command": "cloudcode.gce.sshVmInstance",
					"when": "view == cloudcode.unified.gceExplorer && viewItem =~ /cloudcode.gce.sshVmInstance/",
					"group": "0"
				},
				{
					"command": "cloudcode.gce.sshVmInstance",
					"when": "view == cloudcode.unified.gceExplorer && viewItem =~ /cloudcode.gce.sshVmInstance/",
					"group": "inline@2"
				},
				{
					"command": "cloudcode.gce.scpVmInstance",
					"when": "view == cloudcode.unified.gceExplorer && viewItem =~ /cloudcode.gce.scpVmInstance/",
					"group": "0"
				},
				{
					"command": "cloudcode.gce.scpVmInstance",
					"when": "view == cloudcode.unified.gceExplorer && viewItem =~ /cloudcode.gce.scpVmInstance/",
					"group": "inline@3"
				},
				{
					"command": "cloudcode.functions.openInConsole",
					"when": "view == cloudcode.unified.gcfExplorer && viewItem =~ /cloudcode.functions.openInConsole/",
					"group": "1"
				},
				{
					"command": "cloudcode.functions.editInConsole",
					"when": "view == cloudcode.unified.gcfExplorer && viewItem =~ /cloudcode.functions.editInConsole/",
					"group": "1"
				},
				{
					"command": "cloudcode.openLogsViewer",
					"when": "view == cloudcode.unified.gcfExplorer && viewItem =~ /cloudcode.openLogsViewer/",
					"group": "2"
				},
				{
					"command": "cloudcode.functions.openConfig",
					"when": "view == cloudcode.unified.gcfExplorer && viewItem =~ /cloudcode.functions.openConfig/",
					"group": "inline@1"
				},
				{
					"command": "cloudcode.functions.annotateWorkspace",
					"when": "view == cloudcode.unified.gcfExplorer && viewItem =~ /cloudcode.functions.annotateWorkspace/",
					"group": "1"
				},
				{
					"command": "cloudcode.functions.deployFunction",
					"when": "view == cloudcode.unified.gcfExplorer && viewItem =~ /cloudcode.functions.deployFunction/",
					"group": "inline@1"
				},
				{
					"command": "cloudcode.functions.showLocalFiles",
					"when": "view == cloudcode.unified.gcfExplorer && viewItem =~ /cloudcode.functions.showLocalFiles/",
					"group": "1"
				},
				{
					"command": "cloudcode.functions.showLocalFiles",
					"when": "view == cloudcode.unified.gcfExplorer && viewItem =~ /cloudcode.functions.showLocalFiles/",
					"group": "inline@1"
				},
				{
					"command": "apigee.delete",
					"when": "view == cloudcode.unified.apigee.explorer && viewItem =~ /^.*\\'apigee.delete\\'.*$/"
				},
				{
					"command": "apigee.clone",
					"when": "view == cloudcode.unified.apigee.explorer && viewItem =~ /^.*\\'apigee.clone\\'.*$/"
				},
				{
					"command": "apigee.rename",
					"when": "view == cloudcode.unified.apigee.explorer && viewItem =~ /^.*\\'apigee.rename\\'.*$/"
				},
				{
					"command": "apigee.workspace.open",
					"when": "view == cloudcode.unified.apigee.explorer && viewItem =~ /^.*\\'apigee.workspace.open\\'.*$/",
					"group": "inline"
				},
				{
					"command": "apigee.workspace.create",
					"when": "view == cloudcode.unified.apigee.explorer && viewItem =~ /^.*\\'apigee.workspace.create\\'.*$/",
					"group": "inline"
				},
				{
					"command": "apigee.api.filter.clear",
					"when": "viewItem =~ /^.*\\'apigee.api.filter.clear\\'.*$/",
					"group": "inline@1"
				},
				{
					"command": "apigee.api.filter",
					"when": "viewItem =~ /^.*\\'apigee.api.filter\\'.*$/",
					"group": "inline@0"
				},
				{
					"command": "apigee.workspace.edit",
					"when": "multiRootWorkspace && view == cloudcode.unified.apigee.explorer  && viewItem =~ /^.*\\'apigee.workspace.edit\\'.*$/",
					"group": "inline"
				},
				{
					"command": "apigee.environments.create",
					"when": "viewItem =~ /^.*\\'apigee.environments.create\\'.*$/",
					"group": "inline@0"
				},
				{
					"command": "apigee.environments.create.targetserver",
					"when": "viewItem =~ /^.*\\'apigee.environments.create.targetserver\\'.*$/",
					"group": "inline@0"
				},
				{
					"command": "apigee.environments.create.deployments",
					"when": "viewItem =~ /^.*\\'apigee.environments.create.deployments\\'.*$/",
					"group": "inline@0"
				},
				{
					"command": "apigee.environments.create.flowhooks",
					"when": "viewItem =~ /^.*\\'apigee.environments.create.flowhooks\\'.*$/",
					"group": "inline@0"
				},
				{
					"command": "apigee.resource.create",
					"when": "viewItem =~ /^.*\\'apigee.resource.create\\'.*$/",
					"group": "inline@0",
					"alt": "apigee.resource.create"
				},
				{
					"command": "apigee.resource.import",
					"when": "viewItem =~ /^.*\\'apigee.resource.import\\'.*$/",
					"group": "inline@0",
					"alt": "apigee.resource.import"
				},
				{
					"command": "apigee.proxies.createProxyBundle",
					"when": "viewItem =~ /^.*\\'apigee.proxies.createProxyBundle\\'.*$/",
					"group": "inline@0"
				},
				{
					"command": "apigee.proxies.importProxyBundle",
					"when": "viewItem =~ /^.*\\'apigee.proxies.importProxyBundle\\'.*$/",
					"group": "inline@0"
				},
				{
					"command": "apigee.proxies.createSharedFlowBundle",
					"when": "viewItem =~ /^.*\\'apigee.proxies.createSharedFlowBundle\\'.*$/",
					"group": "inline@0"
				},
				{
					"command": "apigee.proxies.importSharedFlowBundle",
					"when": "viewItem =~ /^.*\\'apigee.proxies.importSharedFlowBundle\\'.*$/",
					"group": "inline@0"
				},
				{
					"command": "apigee.proxies.createProxyEndpoint",
					"when": "viewItem =~ /^.*\\'apigee.proxies.createProxyEndpoint\\'.*$/",
					"group": "inline@0"
				},
				{
					"command": "apigee.proxies.createTargetEndpoint",
					"when": "viewItem =~ /^.*\\'apigee.proxies.createTargetEndpoint\\'.*$/",
					"group": "inline@0"
				},
				{
					"command": "apigee.proxies.createPolicy",
					"when": "viewItem =~ /^.*\\'apigee.proxies.createPolicy\\'.*$/",
					"group": "inline@0"
				},
				{
					"command": "apigee.proxies.createSharedFlow",
					"when": "viewItem =~ /^.*\\'apigee.proxies.createSharedFlow\\'.*$/",
					"group": "inline@0"
				},
				{
					"command": "apigee.tests.createTestBundle",
					"when": "viewItem =~ /^.*\\'apigee.tests.createTestBundle\\'.*$/",
					"group": "inline@0"
				},
				{
					"command": "apigee.tests.createDeveloper",
					"when": "viewItem =~ /^.*\\'apigee.tests.createDeveloper\\'.*$/",
					"group": "inline@0"
				},
				{
					"command": "apigee.tests.createProduct",
					"when": "viewItem =~ /^.*\\'apigee.tests.createProduct\\'.*$/",
					"group": "inline@0"
				},
				{
					"command": "apigee.tests.createApp",
					"when": "viewItem =~ /^.*\\'apigee.tests.createApp\\'.*$/",
					"group": "inline@0"
				},
				{
					"command": "apigee.tests.createMap",
					"when": "viewItem =~ /^.*\\'apigee.tests.createMap\\'.*$/",
					"group": "inline@0"
				},
				{
					"command": "apigee.environments.deploy",
					"when": "dockerInstalled && viewItem =~ /^.*\\'apigee.environments.deploy\\'.*$/",
					"group": "inline@1"
				},
				{
					"command": "apigee.tests.setupTest",
					"when": "dockerInstalled && viewItem =~ /^.*\\'apigee.tests.setupTest\\'.*$/",
					"group": "inline@1"
				},
				{
					"command": "apigee.emulator.setup",
					"when": "view == cloudcode.unified.apigee.explorer && viewItem =~ /^.*\\'apigee.emulator.setup\\'.*$/",
					"group": "inline"
				},
				{
					"command": "apigee.emulator.update",
					"when": "view == cloudcode.unified.apigee.explorer && viewItem =~ /^.*\\'apigee.emulator.update\\'.*$/",
					"group": "inline"
				},
				{
					"command": "apigee.emulator.copyurl",
					"when": "view == cloudcode.unified.apigee.explorer && viewItem =~ /^.*\\'apigee.emulator.copyurl\\'.*$/",
					"group": "inline"
				},
				{
					"command": "apigee.trace.start",
					"when": "config.cloudcode.beta.enableApigeeTrace && view == cloudcode.unified.apigee.explorer && viewItem =~ /^.*\\'apigee.trace.start\\'.*$/",
					"group": "inline"
				},
				{
					"command": "apigee.container.start",
					"when": "view == cloudcode.unified.apigee.explorer && viewItem =~ /^.*\\'apigee.container.start\\'.*$/",
					"group": "inline"
				},
				{
					"command": "apigee.container.stop",
					"when": "view == cloudcode.unified.apigee.explorer && viewItem =~ /^.*\\'apigee.container.stop\\'.*$/",
					"group": "inline"
				},
				{
					"command": "apigee.container.reset",
					"when": "view == cloudcode.unified.apigee.explorer && viewItem =~ /^.*\\'apigee.container.reset\\'.*$/",
					"group": "inline"
				},
				{
					"command": "apigee.container.add",
					"when": "view == cloudcode.unified.apigee.explorer && viewItem =~ /^.*\\'apigee.container.add\\'.*$/",
					"group": "inline"
				},
				{
					"command": "apigee.container.delete",
					"when": "view == cloudcode.unified.apigee.explorer && viewItem =~ /^.*\\'apigee.container.delete\\'.*$/",
					"group": "inline"
				},
				{
					"command": "apigee.proxies.createSharedFlowBundleMultiple",
					"when": "view == cloudcode.unified.apigee.explorer && viewItem =~ /^.*\\'apigee.proxies.createSharedFlowBundleMultiple\\'.*$/",
					"group": "inline@0"
				},
				{
					"command": "apigee.proxies.createProxyMultiple",
					"when": "view == cloudcode.unified.apigee.explorer && viewItem =~ /^.*\\'apigee.proxies.createProxyMultiple\\'.*$/",
					"group": "inline@0"
				},
				{
					"command": "apigee.environments.createMultiple",
					"when": "view == cloudcode.unified.apigee.explorer && viewItem =~ /^.*\\'apigee.environments.createMultiple\\'.*$/",
					"group": "inline@0"
				},
				{
					"command": "apigee.tests.multiple",
					"when": "view == cloudcode.unified.apigee.explorer && viewItem =~ /^.*\\'apigee.tests.multiple\\'.*$/",
					"group": "inline@0"
				},
				{
					"command": "cloudcode.openLogsViewer",
					"when": "view == cloudcode.unified.gceExplorer && viewItem =~ /cloudcode.openLogsViewer/",
					"group": "inline@2"
				},
				{
					"command": "cloudcode.openLogsViewer",
					"when": "view == cloudcode.unified.gceExplorer && viewItem =~ /cloudcode.openLogsViewer/",
					"group": "1"
				},
				{
					"command": "cloudcode.functions.downloadSourceCode",
					"when": "view == cloudcode.unified.gcfExplorer && viewItem =~ /cloudcode.functions.downloadSourceCode/",
					"group": "1"
				},
				{
					"command": "cloudcode.functions.downloadSourceCode",
					"when": "view == cloudcode.unified.gcfExplorer && viewItem =~ /cloudcode.functions.downloadSourceCode/",
					"group": "inline@1"
				},
				{
					"command": "cloudcode.functions.deployFunction",
					"when": "view == cloudcode.unified.gcfExplorer && viewItem =~ /cloudcode.functions.deployFunction/",
					"group": "1"
				},
				{
					"command": "cloudcode.functions.invokeHttpFunction",
					"when": "view == cloudcode.unified.gcfExplorer && viewItem =~ /cloudcode.functions.invokeHttpFunction/",
					"group": "1"
				},
				{
					"command": "cloudcode.functions.invokeHttpFunction",
					"when": "view == cloudcode.unified.gcfExplorer && viewItem =~ /cloudcode.functions.invokeHttpFunction/",
					"group": "inline@1"
				},
				{
					"command": "cloudcode.viewFile",
					"when": "false",
					"group": "1"
				},
				{
					"command": "cloudcode.migrateToContainers.mfit.sourceShowReport",
					"when": "view =~ /cloudcode(.unified)?.mfitSources/",
					"group": "inline"
				},
				{
					"command": "cloudcode.migrateToContainers.mfit.sourceMigrate",
					"when": "view =~ /cloudcode(.unified)?.mfitSources/"
				}
			]
		},
		"viewsContainers": {
			"activitybar": [
				{
					"id": "1-cloudCodeContainer",
					"icon": "images/logo.svg",
					"title": "Cloud Code"
				},
				{
					"id": "1-cloudCodeDuetAIChatViewContainer",
					"icon": "images/chat_spark.svg",
					"title": "Duet AI"
				}
			]
		},
		"viewsWelcome": [
			{
				"view": "cloudcode.unified.cloudRunExplorer",
				"when": "gcloudInstalling",
				"contents": "%cloudcode.welcomeViews.installingDependencies%"
			},
			{
				"view": "cloudcode.unified.secretsExplorer",
				"when": "gcloudInstalling",
				"contents": "%cloudcode.welcomeViews.installingDependencies%"
			},
			{
				"view": "cloudcode.unified.gceExplorer",
				"when": "gcloudInstalling",
				"contents": "%cloudcode.welcomeViews.installingDependencies%"
			},
			{
				"view": "cloudcode.unified.kubectlExplorer",
				"when": "gcloudComponentsInstalling",
				"contents": "%cloudcode.welcomeViews.installingDependencies%"
			},
			{
				"view": "cloudcode.unified.kubernetes.localDevExplorer",
				"when": "gcloudComponentsInstalling",
				"contents": "%cloudcode.welcomeViews.installingDependencies%"
			},
			{
				"view": "cloudcode.unified.cloudRunExplorer",
				"when": "!gcloudInstalling && !authLoggedIn",
				"contents": "%cloudcode.welcomeViews.gcloudLogin%"
			},
			{
				"view": "cloudcode.unified.secretsExplorer",
				"when": "!gcloudInstalling && !authLoggedIn",
				"contents": "%cloudcode.welcomeViews.gcloudLogin%"
			},
			{
				"view": "cloudcode.unified.gceExplorer",
				"when": "!gcloudInstalling && !authLoggedIn",
				"contents": "%cloudcode.welcomeViews.gcloudLogin%"
			},
			{
				"view": "cloudcode.unified.cloudRunExplorer",
				"when": "authLoggedIn && !authProjectId",
				"contents": "%cloudcode.welcomeViews.gcloudSelectProject%"
			},
			{
				"view": "cloudcode.unified.secretsExplorer",
				"when": "authLoggedIn && !authProjectId",
				"contents": "%cloudcode.welcomeViews.gcloudSelectProject%"
			},
			{
				"view": "cloudcode.unified.gceExplorer",
				"when": "authLoggedIn && !authProjectId",
				"contents": "%cloudcode.welcomeViews.gcloudSelectProject%"
			},
			{
				"view": "cloudcode.unified.cloudRunExplorer",
				"when": "authLoggedIn && !authProjectId && !runningOnCloudShell",
				"contents": "%cloudcode.welcomeViews.gcloudSelectProjectSignOut%"
			},
			{
				"view": "cloudcode.unified.secretsExplorer",
				"when": "authLoggedIn && !authProjectId && !runningOnCloudShell",
				"contents": "%cloudcode.welcomeViews.gcloudSelectProjectSignOut%"
			},
			{
				"view": "cloudcode.unified.gceExplorer",
				"when": "authLoggedIn && !authProjectId && !runningOnCloudShell",
				"contents": "%cloudcode.welcomeViews.gcloudSelectProjectSignOut%"
			},
			{
				"view": "cloudcode.unified.cloudRunExplorer",
				"when": "authLoggedIn && authProjectId && runExplorerNeedsApiEnable",
				"contents": "%cloudcode.welcomeViews.explorerEnableRunApi%"
			},
			{
				"view": "cloudcode.unified.secretsExplorer",
				"when": "authLoggedIn && authProjectId && secretmanagerExplorerNeedsApiEnable",
				"contents": "%cloudcode.welcomeViews.explorerEnableSecretManagerApi%"
			},
			{
				"view": "cloudcode.unified.gceExplorer",
				"when": "authLoggedIn && authProjectId && computeExplorerNeedsApiEnable",
				"contents": "%cloudcode.welcomeViews.explorerEnableComputeApi%"
			},
			{
				"view": "cloudcode.unified.gcfExplorer",
				"when": "authLoggedIn && authProjectId && cloudfunctionsExplorerNeedsApiEnable",
				"contents": "%cloudcode.welcomeViews.explorerEnableCloudFunctionApi%"
			},
			{
				"view": "cloudcode.unified.cloudStorageExplorer",
				"when": "authLoggedIn && authProjectId && storageExplorerNeedsApiEnable",
				"contents": "%cloudcode.welcomeViews.explorerEnableCloudStorageApi%"
			},
			{
				"view": "cloudcode.unified.gcfExplorer",
				"when": "gcloudInstalling",
				"contents": "%cloudcode.welcomeViews.installingDependencies%"
			},
			{
				"view": "cloudcode.unified.gcfExplorer",
				"when": "!gcloudInstalling && !authLoggedIn",
				"contents": "%cloudcode.welcomeViews.gcloudLogin%"
			},
			{
				"view": "cloudcode.unified.gcfExplorer",
				"when": "authLoggedIn && !authProjectId && !remoteCloudFunctionsAvailable && !validFunctionsWorkspace",
				"contents": "%cloudcode.welcomeViews.functionsSelectProject%"
			},
			{
				"view": "cloudcode.unified.gcfExplorer",
				"when": "authLoggedIn && !authProjectId && !runningOnCloudShell",
				"contents": "%cloudcode.welcomeViews.gcloudSelectProjectSignOut%"
			},
			{
				"view": "cloudcode.unified.gcfExplorer",
				"when": "authLoggedIn && authProjectId && !remoteCloudFunctionsAvailable && !validFunctionsWorkspace",
				"contents": "%cloudcode.welcomeViews.functionsGetStarted%"
			},
			{
				"view": "cloudcode.unified.awsLambdaImporterExplorer",
				"when": "gcloudInstalling",
				"contents": "%cloudcode.welcomeViews.installingDependencies%"
			},
			{
				"view": "cloudcode.unified.awsLambdaImporterExplorer",
				"when": "!gcloudInstalling && !authLoggedIn",
				"contents": "%cloudcode.welcomeViews.gcloudLogin%"
			},
			{
				"view": "cloudcode.unified.awsLambdaImporterExplorer",
				"when": "authLoggedIn && !authProjectId",
				"contents": "%cloudcode.welcomeViews.gcloudSelectProject%"
			},
			{
				"view": "cloudcode.unified.awsLambdaImporterExplorer",
				"when": "authLoggedIn && !authProjectId && !runningOnCloudShell",
				"contents": "%cloudcode.welcomeViews.gcloudSelectProjectSignOut%"
			},
			{
				"view": "cloudcode.unified.cloudStorageExplorer",
				"when": "gcloudInstalling",
				"contents": "%cloudcode.welcomeViews.installingDependencies%"
			},
			{
				"view": "cloudcode.unified.cloudStorageExplorer",
				"when": "!gcloudInstalling && !authLoggedIn",
				"contents": "%cloudcode.welcomeViews.gcloudLogin%"
			},
			{
				"view": "cloudcode.unified.sourceProtectExplorer",
				"when": "!authLoggedIn",
				"contents": "%cloudcode.welcomeViews.gcloudLogin%"
			},
			{
				"view": "cloudcode.unified.sourceProtectExplorer",
				"when": "authLoggedIn && !onboardedToSourceProtect",
				"contents": "%cloudcode.welcomeViews.sourceProtectLogin%"
			},
			{
				"view": "cloudcode.unified.cloudStorageExplorer",
				"when": "authLoggedIn && !authProjectId",
				"contents": "%cloudcode.welcomeViews.gcloudSelectProject%"
			},
			{
				"view": "cloudcode.unified.cloudStorageExplorer",
				"when": "authLoggedIn && !authProjectId && !runningOnCloudShell",
				"contents": "%cloudcode.welcomeViews.gcloudSelectProjectSignOut%"
			},
			{
				"view": "cloudcode.unified.kubectlExplorer",
				"when": "!gcloudComponentsInstalling",
				"contents": "%cloudcode.welcomeViews.kubernetesNoClusters%"
			},
			{
				"view": "cloudcode.unified.kubernetes.localDevExplorer",
				"when": "!gcloudComponentsInstalling",
				"contents": "%cloudcode.welcomeViews.localDevExplorerGetStarted%"
			},
			{
				"view": "cloudcode.unified.mfitSources",
				"when": "config.cloudcode.beta.enableMigrateToContainers && !m2cToolsInstalled",
				"contents": "Replatform applications to containers on GKE.\n[Install tools](command:cloudcode.migrateToContainers.installTools)\n[Edit tools paths](command:cloudcode.migrateToContainers.editToolsPaths)"
			},
			{
				"view": "cloudcode.unified.mfitSources",
				"when": "config.cloudcode.beta.enableMigrateToContainers && m2cToolsInstalled",
				"contents": "Replatform applications to containers on GKE.\n[Edit Sources](command:cloudcode.migrateToContainers.mfit.editSources)"
			},
			{
				"view": "cloudcode.duetAI.chatView",
				"when": "!authLoggedIn",
				"contents": "%cloudcode.welcomeViews.gcloudLogin%"
			}
		],
		"views": {
			"1-cloudCodeContainer": [
				{
					"id": "cloudcode.unified.kubernetes.localDevExplorer",
					"name": "Development Sessions",
					"icon": "images/kubernetes_logo.svg",
					"visibility": "collapsed"
				},
				{
					"id": "cloudcode.unified.kubectlExplorer",
					"name": "Kubernetes",
					"icon": "images/kubernetes_logo.svg",
					"visibility": "collapsed"
				},
				{
					"id": "cloudcode.unified.cloudRunExplorer",
					"name": "Cloud Run",
					"icon": "images/cloud_run_logo.svg",
					"visibility": "collapsed"
				},
				{
					"id": "cloudcode.unified.apiExplorer",
					"name": "Cloud APIs",
					"icon": "images/cloud_api_logo.svg",
					"visibility": "collapsed"
				},
				{
					"id": "cloudcode.unified.secretsExplorer",
					"name": "Secret Manager",
					"icon": "images/secrets_logo.svg",
					"visibility": "collapsed"
				},
				{
					"id": "cloudcode.unified.gceExplorer",
					"name": "Compute Engine",
					"visibility": "collapsed"
				},
				{
					"id": "cloudcode.unified.apigee.explorer",
					"name": "Apigee",
					"when": "config.cloudcode.beta.enableApigeeExplorers",
					"icon": "images/Apigee.svg",
					"visibility": "collapsed"
				},
				{
					"id": "cloudcode.unified.gcfExplorer",
					"name": "Cloud Functions",
					"icon": "images/functions_logo.svg",
					"visibility": "collapsed"
				},
				{
					"id": "cloudcode.unified.awsLambdaImporterExplorer",
					"name": "AWS Lambda Importer",
					"when": "config.cloudcode.beta.enableAwsLambdaImporter",
					"visibility": "collapsed"
				},
				{
					"id": "cloudcode.unified.cloudStorageExplorer",
					"name": "Cloud Storage",
					"when": "config.cloudcode.beta.enableCloudStorage",
					"visibility": "collapsed"
				},
				{
					"id": "cloudcode.unified.sourceProtectExplorer",
					"name": "Source Protect",
					"when": "config.cloudcode.beta.enableSourceProtect",
					"visibility": "collapsed"
				},
				{
					"id": "cloudcode.unified.mfitSources",
					"name": "Replatform Apps",
					"contextualTitle": "Replatform Apps",
					"when": "config.cloudcode.beta.enableMigrateToContainers",
					"visibility": "collapsed"
				},
				{
					"id": "cloudcode.helpAndFeedbackExplorer",
					"name": "Help and Feedback"
				}
			],
			"1-cloudCodeDuetAIChatViewContainer": [
				{
					"id": "cloudcode.duetAI.chatView",
					"name": "Chat",
					"type": "webview",
					"when": "config.cloudcode.duetAI.enable && config.cloudcode.duetAI.enableChat"
				}
			]
		},
		"snippets": [
			{
				"language": "xml",
				"path": "./snippets/apigee/flow-elements.json"
			},
			{
				"language": "xml",
				"path": "./snippets/apigee/runtime-variables.json"
			}
		]
	},
	"// LINT.IfChange(dependencies)": "",
	"devDependencies": {
		"@types/async-lock": "^1.4.0",
		"@types/fs-extra": "^8.0.0",
		"@types/get-port": "^4.0.1",
		"@types/glob": "^5.0.35",
		"@types/jasmine": "^4.3.5",
		"@types/js-yaml": "^4.0.5",
		"@types/lodash": "^4.14.112",
		"@types/lru-cache": "^5.1.0",
		"@types/mock-fs": "^4.13.1",
		"@types/node": "^16.18.1",
		"@types/node-fetch": "~2.1.4",
		"@types/prettier": "^1.16.1",
		"@types/prismjs": "^1.16.6",
		"@types/semver": "^7.5.0",
		"@types/shell-quote": "^1.6.1",
		"@types/string-argv": "^0.1.0",
		"@types/tar": "^4.0.4",
		"@types/uuid": "^3.4.3",
		"@types/vscode": "1.68.1",
		"@types/webpack-node-externals": "^3.0.0",
		"@types/which": "^3.0.0",
		"@types/xml2js": "^0.4.5",
		"@vscode/test-electron": "2.2.0",
		"cheerio": "^1.0.0-rc.12",
		"cross-env": "^5.2.0",
		"fork-ts-checker-webpack-plugin": "^8.0.0",
		"glob": "^7.1.2",
		"gts": "^1.1.0",
		"improved-yarn-audit": "^3.0.0",
		"jasmine": "^5.0.2",
		"mock-fs": "^5.2.0",
		"npm-run-all": "^4.1.5",
		"prettier": "^1.19.1",
		"source-map-support": "^0.5.4",
		"ts-loader": "^5.3.3",
		"ts-node": "^9.0.0",
		"tslint": "^5.18.0",
		"typemoq": "^2.1.0",
		"typescript": "^5.0.0",
		"typescript-json-schema": "^0.40.0",
		"vsce": "^2.15.0",
		"webpack": "^5.72.0",
		"webpack-cli": "^4.9.2",
		"webpack-node-externals": "^3.0.0"
	},
	"dependencies": {
		"@kubernetes/client-node": "1.0.0-rc3",
		"ajv": "^6.12.5",
		"async-lock": "^1.4.0",
		"csv-parse": "^5.4.0",
		"fs-extra": "^8.1.0",
		"gaxios": "^5.0.0",
		"get-port": "^4.0.1",
		"google-auth-library": "^8.7.0",
		"googleapis": "^107.0.0",
		"googleapis-common": "^6.0.0",
		"hpagent": "^1.2.0",
		"ignore": "^5.2.4",
		"js-yaml": "^4.1.0",
		"jszip": "^3.10.1",
		"lodash": "^4.17.21",
		"lru-cache": "^5.1.0",
		"moment": "^2.27.0",
		"node-fetch": "^2.6.7",
		"node-pty": "^0.10.0",
		"prismjs": "^1.25.0",
		"protobufjs": "^7.2.4",
		"semver": "^7.5.4",
		"shell-quote": "^1.6.1",
		"stacktrace-parser": "^0.1.10",
		"string-argv": "^0.3.1",
		"swagger-ui": "5.4.2",
		"@apidevtools/swagger-parser": "10.1.0",
		"tar": "^6.1.9",
		"tree-kill": "^1.2.2",
		"uuid": "^3.3.2",
		"@vscode/debugadapter": "~1.55.1",
		"@vscode/debugprotocol": "~1.55.1",
		"vscode-languageclient": "^8.0.0",
		"which": "^4.0.0",
		"xml2js": "^0.6.0"
	},
	"// LINT.ThenChange(yarn.lock)": "",
	"repository": {
		"type": "git",
		"url": "https://github.com/GoogleCloudPlatform/cloud-code-vscode.git"
	},
	"resolutions": {
		"gts/**/trim-newlines": "^3.0.1",
		"gts/**/ansi-regex": "^3.0.1",
		"gts/**/yargs-parser": "^13.1.2",
		"gts/**/got": "^11.8.5",
		"vsce/**/xml2js": "^0.5.0",
		"semver": "^7.5.4",
		"tough-cookie": "^4.1.3",
		"optionator": "^0.9.3",
		"swagger-ui/**/tree-sitter": "file:./dependency_skipper",
		"swagger-ui/**/tree-sitter-yaml": "file:./dependency_skipper",
		"swagger-ui/**/tree-sitter-json": "file:./dependency_skipper"
	},
	"bugs": {
		"url": "https://github.com/GoogleCloudPlatform/cloud-code-vscode/issues"
	},
	"__metadata": {
		"id": "5e8803a2-3dc8-42b3-9c5f-ea9d37828c03",
		"publisherId": "f24fd523-af08-49d8-bb0b-f4eda502706e",
		"publisherDisplayName": "Google Cloud",
		"targetPlatform": "undefined",
		"isApplicationScoped": false,
		"updated": true,
		"isPreReleaseVersion": false,
		"installedTimestamp": 1698819447356,
		"preRelease": false
	}
}